
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import java.util.Iterator;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpCollection;

/**
 * Converts {@link Computers} operating on single types to {@link Computers}
 * that operate on {@link Iterable}s of types. N.B. it is the user's
 * responsibility to pass {@link Iterable}s of the same length (otherwise the Op
 * will stop when one of the {@link Iterable}s runs out of {@link Object}s).
 * 
 * @author Gabriel Selzer
 */
public class ComputerToIterables$classGenerics.call($maxArity) implements OpCollection {

#foreach($arity in [0..$maxArity])
	@OpField(names = "engine.adapt")
	public final Function<$computerArity.call($arity)$generics.call($arity), $computerArity.call($arity)$iterableGenerics.call($arity)> liftComputer$arity = 
		(computer) -> {
			return ($computeArgs.call($arity)) -> {
#foreach($a in $iteratorCtor.call($arity))
				$a
#end
				while ($iteratorsHaveNext.call($arity)) {
					computer.compute($iteratorsNext.call($arity));
				}
			};
		};

#end
}

