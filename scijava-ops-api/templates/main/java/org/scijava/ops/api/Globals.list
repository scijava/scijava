maxArity = 16
numConsumers = maxArity+1

inplaceSuffix = ```
{ arity, num ->
  arity == 1 ? '1' :
  arity + "_" + num
}
```
simplifiedInplace = ```
{ arity, num ->
  arity == 1 ? "Arity1" :
  "Arity" + inplaceSuffix(arity, num)
}
```
inplaceType = ```
{ arity, num ->
  "Inplaces." + simplifiedInplace(arity,num)
}
```
computerArity = ```
{ arity ->
  "Computers.Arity${arity}"
}
```
consumerArity = ```
{ arity ->
  arity == 0 ? 'Consumer' :
  arity == 1 ? 'BiConsumer' :
  "Consumers.Arity${arity+1}"
}
```
functionArity = ```
{ arity ->
  arity == 0 ? 'Producer' :
  arity == 1 ? 'Function' :
  arity == 2 ? 'BiFunction' :
  "Functions.Arity${arity}"
}
```
genericParamTypes = ```
{ arity ->
  arity == 0 ? ['O'] :
  arity == 1 ? ['I', 'O'] :
  (1..arity).stream().map{a -> "I$a"}.collect() + ['O']
}
```
generics = ```
{ arity ->
  '<' + String.join(', ', genericParamTypes(arity)) + '>'
}
```
genericsNamesList = ```
{ arity ->
  genericParamTypes(arity).stream().map{a -> 
    a == 'O' ? "out" :
    a == 'I' ? "in" :
    "in${a.substring(1)}"
  }.collect()
}
```
nilNames = ```
{ arity ->
  genericsNamesList(arity).stream().map{a -> "${a}Type"}.collect()
}
```
typeArgs = ```
{ arity ->
  String.join(', ', nilNames(arity).stream().map{a -> "${a}.getType()"}.collect())
}
```
typeParamsList = ```
{ arity ->
  gpt = genericParamTypes(arity)
  names = genericsNamesList(arity)
  (0..arity).stream().map{a -> "${gpt[a]} ${names[a]}"}.collect()
}
```
typeParamsListWithoutOutput = ```
{ arity ->
  gpt = genericParamTypes(arity)
  names = genericsNamesList(arity)
  (0..arity-1).stream().map{a -> "${gpt[a]} ${names[a]}"}.collect()
}
```
applyParams = ```
{ arity ->
  typeParams = typeParamsList(arity)
  typeParams.remove(typeParams.size() - 1)
  String.join(', ', typeParams)
}
```
applyArgs = ```
{ arity ->
  names = genericsNamesList(arity)
  String.join(', ', names[0..names.size() - 2])
}
```
computeParams = ```
{ arity ->
  typeParams = typeParamsList(arity)
  typeParams.set(arity, "@Container " + typeParams.get(arity))
  String.join(', ', typeParams)
}
```
acceptParams = ```
{ arity ->
  String.join(', ', typeParamsList(arity).stream().map{a -> "final " + a}.collect())
}
```
computeArgs = ```
{ arity ->
  String.join(', ', genericsNamesList(arity))
}
```
acceptArgs = ```
{ arity ->
  computeArgs(arity)
}
```

