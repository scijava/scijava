.include Globals.list
arities = (3..numConsumers).collect()

genericsList = ```
{ arity ->
  (1..arity).stream().map{a -> "I$a"}.collect()
}
```
genericsNamesList = ```
{ arity ->
  genericsList(arity).stream().map{a -> "in${a.charAt(1)}"}.collect()
}
```
nilNames = ```
{ arity ->
  genericsNamesList(arity).stream().map{a -> "${a}Type"}.collect()
}
```
typeParamsList = ```
{ arity ->
  generics = genericsList(arity)
  names = genericsNamesList(arity)
  (0..arity - 1).stream().map{a -> "${generics[a]} ${names[a]}"}.collect()
}
```

[Consumers.java]
consumerArity = ```
{ arity ->
  arity == 0 ? 'Consumer' :
  arity == 1 ? 'BiConsumer' :
  "Consumers.Arity${arity+1}"
}
```
objectString =```
{ arity ->
  String.join(', ', (1..arity).stream().map{a -> "Object"}.collect())
}
```
generics = ```
{ arity -> 
    '<' + String.join(', ', genericsList(arity)) + '>'
}
```
superGenerics = ```
{ arity -> 
    '<' + String.join(', ', genericsList(arity).stream().map{a -> "? super ${a}"}.collect()) + '>'
}
```
genericName = ```
{ arity, num ->
	genericsNamesList(arity)[num-1]
}
```
generic = ```
{ arity, num ->
	genericsList(arity)[num-1]
}
```
acceptParams = ```
{ arity ->
  types = typeParamsList(arity)
  String.join(', ', (1..arity).stream().map{a -> "final ${types[a-1]}"}.collect())
}
```
acceptArgs = ```
{ arity ->
  names = genericsNamesList(arity)
  String.join(', ', (1..arity).stream().map{a -> "${names[a-1]}"}.collect())
}
```
