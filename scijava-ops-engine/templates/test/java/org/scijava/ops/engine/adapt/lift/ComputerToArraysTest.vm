
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.scijava.function.Computers;
import org.scijava.ops.engine.AbstractTestEnvironment;
import org.scijava.ops.spi.OpCollection;
import org.scijava.ops.spi.OpField;

/**
 * Tests the adaptation of {@link Computers} running on a type into
 * {@link Computers} running on arrays of that type.
 * 
 * @author Gabriel Selzer
 */
public class ComputerToArraysTest extends AbstractTestEnvironment implements OpCollection{

	@BeforeAll
	public static void addNeededOps() {
		ops.register(new ComputerToArraysTest());
		ops.register(new ComputerToArrays());
	}
	
	/**
	 * @author Gabriel Selzer
	 */
	private class NumericalThing {

		private int number;

		public NumericalThing() {
			number = -1;
		}

		public NumericalThing(int num) {
			number = num;
		}

		public void setNumber(int newNum) {
			number = newNum;
		}

		public int getNumber() {
			return number;
		}
	}
	
#foreach($arity in [0..$maxArity])
	@OpField(names = "test.liftArrayC")
	public final $computerArity.call($arity)$numericalGenerics.call($arity) alterThing$arity = ($computeArgs.call($arity)) -> {out.setNumber($getNumbers.call($arity));};

	@Test
	public void testComputer${arity}ToArrays() {
		NumericalThing[] input = {new NumericalThing(0), new NumericalThing(1), new NumericalThing(2)};
		NumericalThing[] output = {new NumericalThing(), new NumericalThing(), new NumericalThing()};
		ops.op("test.liftArrayC").arity$arity()#if ( $arity > 0 ).input($inputArgs.call($arity))#end.output(output).compute();

		for(int i = 0; i < output.length; i++) {
			Assertions.assertEquals($arity * i, output[i].getNumber());
		}
	}

#end
}
