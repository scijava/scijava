
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.image.adapt;

import java.util.function.BiFunction;
import java.util.function.Function;

import net.imglib2.Dimensions;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.loops.LoopBuilder;
import net.imglib2.type.Type;
import net.imglib2.util.Util;

import org.scijava.function.Functions;
import org.scijava.ops.spi.OpDependency;

/**
 * Lifts {@link Functions} operating on some types {@code I1, I2, ..., In},
 * {@code O extends Type<O>} to a Function operating on
 * {@link RandomAccessibleInterval}s of those types. An output
 * {@link RandomAccessibleInterval} is created based off of the dimensions of
 * the first input image and using the output type of the passed
 * {@link Function}. The {@Function}{@code <I, O>} is then applied iteratively
 * over each pixel of the input image(s). NOTE: It is assumed that the input
 * {@code RAI}s are the same size. If they are not, the lifted {@link Function}
 * will only iteratively process the images until one image runs out of pixels
 * to iterate over.
 *
 * @author Gabriel Selzer
 * @author Mark Hiner
 */
public final class LiftFunctionsToRAI {

	private LiftFunctionsToRAI() {
		// prevent instantiation of static utility class
	}
#foreach($arity in $arities)
#foreach($rais in [1..$arity])

	/**
	 * @implNote op names='engine.adapt', priority='100.'
	 */
	 public static <#foreach($a in [1..$arity])I$a, #{end}O extends Type<O>, #foreach($a in [1..$rais])RAII$a extends RandomAccessibleInterval<I$a>, #{end}RAIO extends RandomAccessibleInterval<O>> $functionNames.call($arity)<#foreach($a in [1..$arity])#if($a <= $rais)RAI#{end}I$a, #{end}RAIO> lift$arity$rais(
			@OpDependency(name = "engine.create") BiFunction<Dimensions, O, RAIO> imgCreator, //
			$functionNames.call($arity)<#foreach($a in [1..$arity])I$a, #{end}O> func //
		) {
		return (#foreach($a in [1..$arity])in$a#if($a < $arity), #end#{end}) -> {
#foreach($a in [1..$rais])
			I$a inType$a = Util.getTypeFromInterval(in$a);
#end
			O outType = func.apply(#foreach($a in [1..$arity])#if($a <= $rais)inType#{else}in#end$a#if($a < $arity), #end#{end});
			RAIO outImg = imgCreator.apply(in1, outType);
			LoopBuilder.setImages(#foreach($a in [1..$rais])in$a, #{end}outImg).multiThreaded() //
				.forEachPixel((#foreach($a in [1..$rais])i$a, #{end}o) -> o.set(func.apply(#foreach($a in [1..$arity])#if($a <= $rais)i$a#{else}in$a#end#if($a < $arity), #end#{end})));
			return outImg;
		};
	}
#end
#end 
}
