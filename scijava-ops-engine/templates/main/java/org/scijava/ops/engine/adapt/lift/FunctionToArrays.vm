
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import java.lang.reflect.Array;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Functions;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpCollection;
import org.scijava.ops.spi.OpCollection;

/**
 * Converts {@link Functions} operating on single types to {@link Functions}
 * that operate on arrays of types. N.B. it is the user's responsibility to pass
 * arrays of the same length (otherwise the Op will stop when one of the arrays
 * runs out of {@link Object}s).
 * 
 * @author Gabriel Selzer
 */
public class FunctionToArrays$classGenerics.call($maxArity) implements OpCollection{

	// TODO: extract logic to a utility class
	private int minLength(Object[]... arrays) {
		int minLength = Integer.MAX_VALUE;
		for (Object[] array : arrays)
			if (array.length < minLength) minLength = array.length;
		return minLength;
	}
	
	// NOTE: we cannot convert Producers since there is no way to determine the
	// length of the output array

#foreach($arity in [1..$maxArity])
	@OpField(names = "engine.adapt", params = "fromOp, toOp")
	public final Function<$functionArity.call($arity)$generics.call($arity), $functionArity.call($arity)$arrayGenerics.call($arity)> liftFunction$arity =
		(function) -> {
			return ($applyArgs.call($arity)) -> {
				int len = minLength($applyArgs.call($arity));
				if (len == 0) throw new UnsupportedOperationException("Unable to create an empty output array.");
				O component = function.apply($arraysAtPos0.call($arity));
				@SuppressWarnings("unchecked")
				O[] out = (O[]) Array.newInstance(component.getClass(), len);
				
				for (int i = 0; i < len; i++) {
					out[i] = function.apply($arraysAtPosI.call($arity));
				}
				return out;
			};
		};

#end
}
