
package org.scijava.ops.engine;

import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Inplaces;
import org.scijava.function.Producer;
import org.scijava.ops.spi.OpDependency;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpMethod;
import org.scijava.ops.spi.OpCollection;

public class OpMethodTestOps implements OpCollection {

	// -- Functions -- //
	@OpMethod(names = "test.multiplyNumericStrings", type = Producer.class)
	public static Integer multiplyNumericStringsProducer() {
		return Integer.valueOf(1);
	}
#foreach($arity in [1..$maxArity])

	@OpMethod(names = "test.multiplyNumericStrings", type = ${functionArity.call($arity)}.class)
	public static Integer multiplyNumericStringsFunction$arity($stringInputs.call($arity))
	{
		return multiplyNumericStringsFunction${arity}(parseInt, $applyArgs.call($arity));
	}
#end

	// -- Computers -- //
	
	@OpMethod(names = "test.doubleList", type = Computers.Arity0.class)
	public static void doublesToList0(List<Double> output) {
		output.clear();
	}
#foreach($arity in [1..$maxArity])

	@OpMethod(names = "test.doubleList", type = ${computerArity.call($arity)}.class)
	public static void doublesToList$arity($stringInputs.call($arity)#if($arity > 0),#{else}#end List<Double> output) {
		doublesToListWithOp${arity}(appendDouble, $applyArgs.call($arity), output);
	}
#end

	// -- Inplaces -- //

#foreach($arity in [1..$maxArity])
#foreach($a in [1..$arity])

	@OpMethod(names = "test.addDoubles$inplaceSuffix.call($arity, $a)", type = ${inplaceType.call($arity, $a)}.class)
	public static void addDoubles$inplaceSuffix.call($arity, $a)($doubleInputs.call($arity, $a)) {
		dependentAddDoubles$inplaceSuffix.call($arity, $a)(addArrays, $inplaceArgsString.call($arity, $a));
	}
#end
#end

	// -- Helper Op -- //

	@OpField(names = "test.parseInt")
	public static final Function<String, Integer> parseInt = in -> Integer
		.parseInt(in);

	@OpField(names = "test.appendDouble")
	public static final Inplaces.Arity2_1<List<Double>, String> appendDouble = (
		list, element) -> list.add(Double.parseDouble(element));

	@OpField(names = "test.addArrays")
	public static final Inplaces.Arity2_1<double[], double[]> addArrays = (io,
		in2) -> {
		for (int i = 0; i < io.length; i++)
			io[i] += in2[i];
	};

	// -- Dependent Functions -- //
#foreach($arity in [1..$maxArity])

	@OpMethod(names = "test.dependentMultiplyStrings", type = ${functionArity.call($arity)}.class)
	public static Integer multiplyNumericStringsFunction$arity(
		@OpDependency(name = "test.parseInt") Function<String, Integer> op,
		$stringInputs.call($arity)
		)
	{
		Integer out = Integer.valueOf(1);

#foreach($a in $opArgs.call($arity))
		out *= op.apply(${a});
#end

		return out;
	}
#end

	// -- Dependent Computers -- //
#foreach($arity in [1..$maxArity])

	@OpMethod(names = "test.dependentDoubleList", type = ${computerArity.call($arity)}.class)
	public static void doublesToListWithOp${arity}(
		@OpDependency(name = "test.appendDouble") Inplaces.Arity2_1<List<Double>, String> op,
		$stringInputs.call($arity),
		List<Double> output
		)
	{
		output.clear();
#foreach($a in $opArgs.call($arity))
		op.mutate(output, $a);
#end
	}
#end

	// -- Dependent Inplaces -- //

#foreach($arity in [1..$maxArity])
#foreach($a in [1..$arity])

	@OpMethod(names = "test.dependentAddDoubles$inplaceSuffix.call($arity, $a)", type = ${inplaceType.call($arity, $a)}.class)
	public static void dependentAddDoubles$inplaceSuffix.call($arity, $a)(@OpDependency(name = "test.addArrays") Inplaces.Arity2_1<double[], double[]> op, $doubleInputs.call($arity, $a)) {
#foreach($input in $inputOnlyInplaceArgs.call($arity, $a))
			op.mutate(io, $input);
#end
	}
#end
#end
}
