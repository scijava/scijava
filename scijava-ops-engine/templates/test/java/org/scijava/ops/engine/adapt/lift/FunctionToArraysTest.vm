
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.scijava.function.Functions;
import org.scijava.ops.engine.AbstractTestEnvironment;
import org.scijava.ops.spi.OpCollection;
import org.scijava.ops.spi.OpField;
import org.scijava.types.Nil;

/**
 * Tests the adaptation of {@link Functions} running on a type into
 * {@link Functions} running on arrays of that type.
 * 
 * @author Gabriel Selzer
 */
public class FunctionToArraysTest extends AbstractTestEnvironment implements OpCollection {

	@BeforeAll
	public static void addNeededOps() {
		ops.register(new FunctionToArraysTest());
		ops.register(new FunctionToArrays());
	}

	/**
	 * @author Gabriel Selzer
	 */
	private class NumericalThing {

		private int number;

		public NumericalThing(int num) {
			number = num;
		}

		public int getNumber() {
			return number;
		}
	}

#foreach($arity in [1..$maxArity])
	@OpField(names = "test.liftArrayF")
	public final $functionArity.call($arity)$numericalGenerics.call($arity) alterThing$arity = (
		$applyArgs.call($arity)) -> new NumericalThing($getNumbers.call($arity));

	@Test
	public void testFunction${arity}ToArrays() {
		NumericalThing[] input = { new NumericalThing(0), new NumericalThing(1),
			new NumericalThing(2) };
		NumericalThing[] output = ops //
			.op("test.liftArrayF") //
			.arity$arity() //
			.input($inputArgs.call($arity)) //
			.outType(new Nil<NumericalThing[]>()
			{}).apply();

		for (int i = 0; i < output.length; i++) {
			Assertions.assertEquals($arity * i, output[i].getNumber());
		}
	}

#end
}
