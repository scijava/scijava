/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.complexLift;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.ops.engine.BaseOpHints.Adaptation;
import org.scijava.ops.spi.OpDependency;
import org.scijava.ops.spi.Op;
import org.scijava.ops.spi.OpClass;
import org.scijava.priority.Priority;

/**
 * Collection of adaptation Ops to convert {@link Functions} into
 * {@link Computers} with the use of a {@link Function} that copies the output
 * using the first input as a model.
 * 
 * @author Gabriel Selzer
 */
public class FunctionsToComputersAndLift {
#foreach($arity in [1..$maxArity])

	@OpClass(names = "engine.adapt", priority = Priority.LOW)
	public static class Function${arity}ToComputer${arity}AndLiftAfter$generics.call($arity) implements
		Function<$functionArity.call($arity)$generics.call($arity), $computerArity.call($arity)$iterableGenerics.call($arity)>,
		Op
	{

		@OpDependency(name = "engine.adapt", hints={Adaptation.FORBIDDEN})
		Function<$functionArity.call($arity)$generics.call($arity), $computerArity.call($arity)$generics.call($arity)> adaptor;
		@OpDependency(name = "engine.adapt", hints={Adaptation.FORBIDDEN})
		Function<$computerArity.call($arity)$generics.call($arity), $computerArity.call($arity)$iterableGenerics.call($arity)> lifter;

		/**
		 * @param function - the Function to convert
		 * @return the function as a Computer
		 */
		@Override
		public $computerArity.call($arity)$iterableGenerics.call($arity) apply(
			$functionArity.call($arity)$generics.call($arity) function)
		{
			return lifter.apply(adaptor.apply(function));
		}

	}

	@OpClass(names = "engine.adapt", priority = Priority.LOW + 1)
	public static class Function${arity}ToComputer${arity}AndLiftBefore$generics.call($arity) implements
		Function<$functionArity.call($arity)$generics.call($arity), $computerArity.call($arity)$iterableGenerics.call($arity)>,
		Op
	{

		@OpDependency(name = "engine.adapt", hints={Adaptation.FORBIDDEN})
		Function<$functionArity.call($arity)$iterableGenerics.call($arity), $computerArity.call($arity)$iterableGenerics.call($arity)> adaptor;
		@OpDependency(name = "engine.adapt", hints={Adaptation.FORBIDDEN})
		Function<$functionArity.call($arity)$generics.call($arity), $functionArity.call($arity)$iterableGenerics.call($arity)> lifter;

		/**
		 * @param function - the Function to convert
		 * @return the function as a Computer
		 */
		@Override
		public $computerArity.call($arity)$iterableGenerics.call($arity) apply(
			$functionArity.call($arity)$generics.call($arity) function)
		{
			return adaptor.apply(lifter.apply(function));
		}

	}
#end
}
