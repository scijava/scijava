/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.functional;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Inplaces;
import org.scijava.ops.engine.BaseOpHints.Adaptation;
import org.scijava.ops.spi.Op;
import org.scijava.ops.spi.OpClass;
import org.scijava.ops.spi.OpCollection;
import org.scijava.ops.spi.OpDependency;

#set($classArity = $maxArity + 1)
/**
 * Collection of adaptation Ops to convert {@link Inplaces} into
 * {@link Functions}.
 * 
 * @author Gabriel Selzer
 */
public class InplacesToFunctions$generics.call($classArity, $classArity) implements OpCollection {

#foreach($arity in [1..$maxArity])
#foreach($a in [1..$arity])
	@OpClass(names = "engine.adapt")
	public static class Inplace$inplaceSuffix.call($arity, $a)ToFunction${arity}$generics.call($arity, $a) implements Function<$inplaceType.call($arity, $a)$generics.call($arity, $a), $functionArity.call($arity)$functionGenerics.call($arity, $a)>, Op {
		
		@OpDependency(name = "engine.create", hints={Adaptation.FORBIDDEN})
		private Function<IO, IO> createOp;
		@OpDependency(name = "engine.copy", hints={Adaptation.FORBIDDEN})
		private Computers.Arity1<IO, IO> copyOp;

		/**
		 * @param t the Inplace to adapt
		 * @return an adaptation of inplace
		 */
		@Override
		public $functionArity.call($arity)$functionGenerics.call($arity, $a) apply($inplaceType.call($arity, $a)$generics.call($arity, $a) t) {
			return ($mutateArgs.call($arity, $a)) -> {
				IO temp = createOp.apply(io);
				copyOp.accept(io, temp);
				t.mutate($mutateTempParams.call($arity, $a));
				return temp;
			};
		}
	}

#end
#end
}
