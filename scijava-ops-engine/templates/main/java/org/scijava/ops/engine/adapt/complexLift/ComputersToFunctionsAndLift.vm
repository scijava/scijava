/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.complexLift;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.ops.engine.BaseOpHints.Adaptation;
import org.scijava.ops.spi.OpDependency;
import org.scijava.ops.spi.Op;
import org.scijava.ops.spi.OpClass;
import org.scijava.priority.Priority;

/**
 * Collection of adaptation Ops to convert {@link Computers} into
 * {@link Functions} and then lift them so that they run on {@link Iterable}s as input.
 * 
 * @author Gabriel Selzer
 */
public class ComputersToFunctionsAndLift {

#foreach($arity in [1..$maxArity])
	@OpClass(names = "engine.adapt", priority = Priority.LOW)
	public static class Computer${arity}ToFunction${arity}AndLiftViaSource$generics.call($arity)
			implements Function<$computerArity.call($arity)$generics.call($arity), $functionArity.call($arity)$iterableGenerics.call($arity)>, Op {

		@OpDependency(name = "engine.adapt", hints={Adaptation.FORBIDDEN})
		Function<$computerArity.call($arity)$generics.call($arity), $functionArity.call($arity)$generics.call($arity)> adaptor;
		@OpDependency(name = "engine.adapt", hints={Adaptation.FORBIDDEN})
		Function<$functionArity.call($arity)$generics.call($arity), $functionArity.call($arity)$iterableGenerics.call($arity)> lifter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public $functionArity.call($arity)$iterableGenerics.call($arity) apply($computerArity.call($arity)$generics.call($arity) computer) {
			return lifter.apply(adaptor.apply(computer));
		}

	}

#end
}
