/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

package org.scijava.function;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.stream.Collectors;

/**
 * Container class for inplace-style functional interfaces at various
 * <a href="https://en.wikipedia.org/wiki/Arity">arities</a>.
 * <p>
 * An inplace has functional method {@code mutate} with a number of arguments
 * corresponding to the arity. Any of the arguments annotated
 * with @{@link Mutable} may be mutated during execution. Some interfaces narrow
 * this behavior to only a specific argument; most ops in practice will
 * implement one of these narrowed interfaces. For example,
 * {@link Inplaces.Arity2_1} is a binary inplace op that mutates the first of
 * two arguments&mdash;e.g., an {@code a /= b} division operation would be an
 * {@link Inplaces.Arity2_1}, whereas {@code b = a / b} would be an
 * {@link Inplaces.Arity2_2}.
 * </p>
 * <p>
 * Each inplace interface implements a corresponding {@link Consumer}-style
 * interface (see {@link Consumers}) with same arity; the consumer's
 * {@code accept} method simply delegates to {@code mutate}. This pattern allows
 * inplace ops to be used directly as consumers as needed.
 * </p>
 * <p>
 * Note that there is no nullary (arity 0) inplace interface, because there
 * would be no arguments to mutate; see also {@link Consumers.Arity0},
 * {@link Computers.Arity0} and {@link Producer}.
 * </p>
 *
 * @author Curtis Rueden
 * @author Gabriel Selzer
 */
public final class Inplaces {

	private Inplaces() {
		// NB: Prevent instantiation of container class.
	}

	/**
	 * All known inplace types and their arities and mutable positions. The
	 * entries are sorted by arity and mutable position.
	 */
	public static final Map<InplaceInfo, Class<?>> ALL_INPLACES;
	public static final Map<Class<?>, InplaceInfo> ALL_ARITIES;

	static {
		ALL_INPLACES = new HashMap<>();
		ALL_ARITIES = new HashMap<>();
#foreach($arity in $arities)
#foreach($a in [1..$arity])
#set($inplaceIndex = $a - 1)
        InplaceInfo info_${arity}_${a} = new InplaceInfo(${arity}, $inplaceIndex);
		ALL_INPLACES.put(info_${arity}_${a}, $inplaceClass.call($arity, $a));
		ALL_ARITIES.put($inplaceClass.call($arity, $a), info_${arity}_${a});
#end
#end
	}

	/**
	 * @return {@code true} if the given type is a known
	 *         inplace type, {@code false} otherwise. <br>
	 *         Note that only the type itself and not its type hierarchy is
	 *         considered.
	 * @throws NullPointerException If {@code c} is {@code null}.
	 */
	public static boolean isInplace(Class<?> c) {
		return ALL_ARITIES.containsKey(c);
	}

	public static List<Class<?>> getInplacesOfArity(final int arity) {
		return ALL_INPLACES.entrySet().stream() //
			.filter(e -> e.getKey().arity() == arity) //
			.map(Entry::getValue) //
			.collect(Collectors.toList());
	}

	/**
	 * @param arity an {@code int} corresponding to a {@code Inplace} of that
	 *          arity.
	 * @param mutableIndex an {@code int} corresponding to a the mutable index of d
	 *          arity.
	 * @return the {@code Inplace} of arity {@code arity}.
	 * @throws IllegalArgumentException iff there is no known {@code Inplace} of
	 *           arity {@code arity}.
	 */
	public static Class<?> inplaceOfArity(int arity, int mutableIndex) {
		InplaceInfo info = new InplaceInfo(arity, mutableIndex);
		if (ALL_INPLACES.containsKey(info)) return ALL_INPLACES.get(info);
		throw new IllegalArgumentException("No Inplace of arity " + arity +
			" and mutable index " + mutableIndex);
	}

	/**
	 * @param c the {@link Class} of unknown arity
	 * @return the arity of {@code c}, or {@code -1} if {@code c} is <b>not</b> a
	 *         {@code Inplace}.
	 */
	public static InplaceInfo arityOf(Class<?> c) {
		return ALL_ARITIES.getOrDefault(c, new InplaceInfo(-1, -1));
	}

	@FunctionalInterface
	public interface Arity1<IO> extends Consumer<IO> {

		void mutate(@Mutable IO io);

		@Override
		default void accept(IO io) {
			mutate(io);
		}
	}

#foreach($arity in [2..$maxArity])
#set($cArity = $arity - 1)
	@FunctionalInterface
	public interface Arity${arity}$allMutableGenerics.call($arity) extends ${consumerArity.call($cArity)}$allMutableGenerics.call($arity)
	{

		void mutate($allMutableMutateParams.call($arity));

		@Override
		default void accept($allMutableMutateParams.call($arity))
		{
			mutate($allMutableMutateArgs.call($arity));
		}
	}

#foreach($a in [1..$arity])
	@FunctionalInterface
	public interface $simplifiedInplace.call($arity, $a)$generics.call($arity, $a) extends Arity${arity}$generics.call($arity, $a)
	{

		@Override
		void mutate($mutateArgs.call($arity, $a));
	}

#end
#end
	public static class InplaceInfo {

		private final int arity;
		private final int mutablePosition;

		public InplaceInfo(final int arity, final int mutablePosition) {
			this.arity = arity;
			this.mutablePosition = mutablePosition;
		}

		public int arity() {
			return arity;
		}

		public int mutablePosition() {
			return mutablePosition;
		}

		@Override
		public boolean equals(Object that) {
			if (!(that instanceof InplaceInfo)) return false;
			InplaceInfo other = (InplaceInfo) that;
			return other.arity == arity && other.mutablePosition == mutablePosition;
		}

		@Override
		public int hashCode() {
			return Objects.hash(arity, mutablePosition);
		}
	}
}
