
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.scijava.function.Functions;
import org.scijava.ops.engine.AbstractTestEnvironment;
import org.scijava.ops.engine.OpBuilderTestOps;
import org.scijava.types.Nil;

/**
 * Tests the adaptation of {@link Functions} running on a type into
 * {@link Functions} running on an {@link Iterable} of that type.
 * 
 * @author Gabriel Selzer
 */
public class FunctionToIterablesTest extends AbstractTestEnvironment {

	@BeforeAll
	public static void AddNeededOps() {
		ops.register(new FunctionToIterables());
		ops.register(new OpBuilderTestOps());
	}

#foreach($arity in [1..$maxArity])
	@Test
	public void testFunction${arity}ToIterables() {
		List<Double> in = Arrays.asList(1., 2., 3.);
		List<Double> expected = $inplaceExpectedList.call($arity)
		Iterable<Double> output = ops.op("test.addDoubles") //
			.arity$arity() //
			.input($inputList.call($arity)) //
			.outType(new Nil<Iterable<Double>>()
			{}).apply();
		assertIterationsEqual(expected, output);
	}

#end
}
