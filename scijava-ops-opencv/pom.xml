<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.scijava</groupId>
		<artifactId>pom-scijava</artifactId>
		<version>40.0.0</version>
		<relativePath />
	</parent>

	<artifactId>scijava-ops-opencv</artifactId>
	<version>1.0.1-SNAPSHOT</version>

	<name>SciJava Ops OpenCV</name>
	<description>OpenCV configuration for SciJava Ops.</description>
	<url>https://github.com/scijava/scijava</url>
	<inceptionYear>2023</inceptionYear>
	<organization>
		<name>SciJava</name>
		<url>https://scijava.org/</url>
	</organization>
	<licenses>
		<license>
			<name>Simplified BSD License</name>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>ctrueden</id>
			<name>Curtis Rueden</name>
			<roles>
				<role>founder</role>
				<role>lead</role>
				<role>reviewer</role>
				<role>support</role>
				<role>maintainer</role>
			</roles>
		</developer>
		<developer>
			<id>hinerm</id>
			<name>Mark Hiner</name>
			<roles>
				<role>founder</role>
				<role>lead</role>
				<role>debugger</role>
				<role>reviewer</role>
				<role>support</role>
			</roles>
		</developer>
		<developer>
			<id>gselzer</id>
			<name>Gabriel Selzer</name>
			<url>https://github.com/gselzer</url>
			<roles>
				<role>founder</role>
				<role>debugger</role>
				<role>reviewer</role>
				<role>support</role>
			</roles>
		</developer>
	</developers>
	<contributors>
		<contributor>
			<name>Gabriella Turek</name>
			<properties><id>turekg</id></properties>
		</contributor>
	</contributors>

	<mailingLists>
		<mailingList>
			<name>Image.sc Forum</name>
			<archive>https://forum.image.sc/tag/scijava</archive>
		</mailingList>
	</mailingLists>

	<scm>
		<connection>scm:git:https://github.com/scijava/scijava</connection>
		<developerConnection>scm:git:git@github.com:scijava/scijava</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/scijava/scijava</url>
	</scm>
	<issueManagement>
		<system>GitHub Issues</system>
		<url>https://github.com/scijava/scijava/issues</url>
	</issueManagement>
	<ciManagement>
		<system>GitHub Actions</system>
		<url>https://github.com/scijava/scijava/actions</url>
	</ciManagement>

	<properties>
		<package-name>org.scijava.ops.opencv</package-name>

		<license.licenseName>bsd_2</license.licenseName>
		<license.copyrightOwners>SciJava developers.</license.copyrightOwners>

		<scijava.surefire.args>--add-reads org.scijava.ops.opencv=org.scijava.ops.api,net.imglib2</scijava.surefire.args>

		<!--
		NB: Older versions of OpenJDK 11 have a bug in the javadoc tool,
		which causes errors like:

		[ERROR] javadoc: error - The code being documented uses packages
		in the unnamed module, but the packages defined in
		https://github.com/scijava/scijava/apidocs/ are in named modules.

		The most recent version of OpenJDK 11 known to have this problem
		is 11.0.8; the oldest version known to have fixed it is 11.0.17.
		Therefore, we set the minimum build JDK version to 11.0.17 here.
		-->
		<scijava.jvm.build.version>[11.0.17,)</scijava.jvm.build.version>
		<scijava.jvm.version>11</scijava.jvm.version>

		<!-- Note: These versions must match across all component POMs! -->
		<scijava-ops-api.version>1.0.1-SNAPSHOT</scijava-ops-api.version>
		<scijava-ops-engine.version>1.0.1-SNAPSHOT</scijava-ops-engine.version>
		<scijava-ops-image.version>2.0.0-SNAPSHOT</scijava-ops-image.version>
		<scijava-ops-indexer.version>1.0.1-SNAPSHOT</scijava-ops-indexer.version>
		<scijava-ops-spi.version>1.0.1-SNAPSHOT</scijava-ops-spi.version>
		<scijava-taglets.version>1.0.1-SNAPSHOT</scijava-taglets.version>
		<scijava-types.version>1.0.1-SNAPSHOT</scijava-types.version>

		<scijava.ops.parse>true</scijava.ops.parse>
	</properties>

	<dependencies>
		<!-- SciJava dependencies -->
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-types</artifactId>
			<version>${scijava-types.version}</version>
		</dependency>

		<!-- OpenCV dependencies -->
		<dependency>
			<groupId>org.bytedeco</groupId>
			<artifactId>opencv</artifactId>
		</dependency>

		<!-- OpenCV runtime native dependencies -->
		<dependency>
			<groupId>org.bytedeco</groupId>
			<artifactId>opencv</artifactId>
			<classifier>${scijava.natives.classifier.opencv}</classifier>
			<scope>runtime</scope>
		</dependency>

		<!-- Runtime dependencies for wrapped ops -->
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>imagej-opencv</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Test scope dependencies -->
		<dependency>
			<groupId>net.imglib2</groupId>
			<artifactId>imglib2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-ops-api</artifactId>
			<version>${scijava-ops-api.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-ops-engine</artifactId>
			<version>${scijava-ops-engine.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-ops-image</artifactId>
			<version>${scijava-ops-image.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<repositories>
		<repository>
			<id>scijava.public</id>
			<url>https://maven.scijava.org/content/groups/public</url>
		</repository>
	</repositories>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.scijava</groupId>
							<artifactId>scijava-ops-indexer</artifactId>
							<version>${scijava-ops-indexer.version}</version>
						</path>
					</annotationProcessorPaths>
					<fork>true</fork>
					<compilerArgs>
						<arg>-Ascijava.ops.parse="${scijava.ops.parse}"</arg>
						<arg>-Ascijava.ops.opVersion="${project.version}"</arg>
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<links>
						<link>https://javadoc.scijava.org/Java11/</link>
					</links>
					<tagletArtifacts>
						<tagletArtifact>
							<groupId>org.scijava</groupId>
							<artifactId>scijava-taglets</artifactId>
							<version>${scijava-taglets.version}</version>
						</tagletArtifact>
					</tagletArtifacts>
					<tags>
						<tag>
							<name>implNote</name>
							<placement>a</placement>
							<head>Implementation Note:</head>
						</tag>
					</tags>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-package-rules</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<phase>test</phase>
						<configuration>
							<rules>
								<NoPackageCyclesRule implementation="org.scijava.maven.plugin.enforcer.NoPackageCyclesRule" />
								<NoSubpackageDependenceRule implementation="org.scijava.maven.plugin.enforcer.NoSubpackageDependenceRule" />
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>union-op-yaml</id>
						<phase>process-test-classes</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<concat destfile="${project.basedir}/target/test-classes/ops.yaml" append="true">
									<fileset file="${project.basedir}/target/classes/ops.yaml" />
								</concat>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>only-eclipse-scijava</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<!--
						Configure the Eclipse m2e plugin to support needed plugins.
						-->
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<!--
							NB: Eclipse cannot handle an overridden version property here!
							The version needs to stay hardcoded at 1.0.0.
							-->
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions combine.children="append">
										<!--
										NB: Make Eclipse union the metadata indices on every build; see:
										https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html
										-->
										<pluginExecution>
											<pluginExecutionFilter>
												<artifactId>maven-antrun-plugin</artifactId>
												<goals>
													<goal>run</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute>
													<runOnConfiguration>true</runOnConfiguration>
													<!--
													NB: You might think we could run the annotations
													union script once only, at configuration time.
													Unfortunately, when configuration happens in Eclipse,
													the plugin annotations have not yet been generated.
													So let's redo the union on every incremental build.
													That'll show 'em!
													-->
													<runOnIncremental>true</runOnIncremental>
												</execute>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>
</project>
