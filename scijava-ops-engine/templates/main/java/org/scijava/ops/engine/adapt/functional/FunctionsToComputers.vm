/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.functional;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Producer;
import org.scijava.ops.engine.BaseOpHints.Adaptation;
import org.scijava.ops.spi.OpDependency;
import org.scijava.ops.spi.Op;
import org.scijava.ops.spi.OpClass;

/**
 * Collection of adaptation Ops to convert {@link Computers} into
 * {@link Functions} with the use of a {@link Computer} that copies the output
 * of the function into the preallocated argument.
 * 
 * @author Gabriel Selzer
 */
public class FunctionsToComputers {

#foreach($arity in [0..$maxArity])
	@OpClass(names = "engine.adapt")
	public static class Function${arity}ToComputer${arity}$generics.call($arity) implements Function<$functionArity.call($arity)$generics.call($arity), $computerArity.call($arity)$generics.call($arity)>, Op {

		@OpDependency(name = "engine.copy", hints={Adaptation.FORBIDDEN})
		Computers.Arity1<O, O> copyOp;

		/**
		 * @param function the function to adapt
		 * @return an adaptation of function
		 */
		@Override
		public $computerArity.call($arity)$generics.call($arity) apply($functionArity.call($arity)$generics.call($arity) function) {
			return ($computeArgs.call($arity)) -> {
				O temp = function.#if($arity==0)create()#{else}apply($applyArgs.call($arity))#end;
				copyOp.compute(temp, out);
			};
		}

	}

#end
}
