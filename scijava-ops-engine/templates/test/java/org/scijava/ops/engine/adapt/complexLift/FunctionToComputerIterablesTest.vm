
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.complexLift;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.scijava.ops.engine.AbstractTestEnvironment;
import org.scijava.ops.engine.adapt.functional.FunctionToComputerAdaptTestOps;
import org.scijava.ops.engine.adapt.functional.FunctionsToComputers;
import org.scijava.ops.engine.adapt.lift.ComputerToIterables;
import org.scijava.ops.engine.copy.CopyOpCollection;

public class FunctionToComputerIterablesTest extends AbstractTestEnvironment {

	@BeforeAll
	public static void AddNeededOps() {
		Object[] lifterOps = objsFromNoArgConstructors(FunctionsToComputersAndLift.class.getDeclaredClasses());
		ops.register(lifterOps);
		ops.register(new ComputerToIterables());
		Object[] adapterOps = objsFromNoArgConstructors(FunctionsToComputers.class.getDeclaredClasses());
		ops.register(adapterOps);
		ops.register(new CopyOpCollection());
		ops.register(new FunctionToComputerAdaptTestOps());
	}
#foreach($arity in [1..$maxArity])

	@Test
	public void testFunction${arity}ToComputer${arity}() {
		List<double[]> in = Arrays.asList(new double[] { 2, 4 });
		List<double[]> output = Arrays.asList(new double[] { 0, 0 });
		ops.op("test.FtC").arity$arity().input($inList.call($arity)).output(output).compute();
		Assertions.assertArrayEquals(new double[] $expectedValue.call($arity), output.get(0), 0);
	}
#end
}

