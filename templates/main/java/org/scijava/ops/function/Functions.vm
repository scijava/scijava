/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

package org.scijava.ops.function;

import com.google.common.collect.BiMap;
import com.google.common.collect.ImmutableBiMap;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.ops.OpService;
import org.scijava.ops.types.Nil;
import org.scijava.util.Types;

/**
 * Container class for
 * higher-<a href="https://en.wikipedia.org/wiki/Arity">arity</a>
 * {@link Function}-style functional interfaces&mdash;i.e. with functional
 * method {@code apply} with a number of arguments corresponding to the arity.
 * <ul>
 * <li>For 0-arity (nullary) functions, use {@link Producer} (and notice the
 * functional method there is named {@link Producer\#create()}).</li>
 * <li>For 1-arity (unary) functions, use {@link Function}.</li>
 * <li>For 2-arity (binary) functions, use {@link BiFunction}.</li>
 * </ul>
 *
 * @author Curtis Rueden
 * @author Gabriel Selzer
 */
public final class Functions {

	private Functions() {
		// NB: Prevent instantiation of utility class.
	}

	// -- BEGIN TEMP --

	/**
	 * All known function types and their arities. The entries are sorted by
	 * arity, i.e., the {@code i}-th entry has an arity of {@code i}.
	 */
	public static final BiMap<Class<?>, Integer> ALL_FUNCTIONS;

	static {
		final Map<Class<?>, Integer> functions = new HashMap<>(10);
#foreach($arity in [0..$maxArity])
		functions.put(${functionArity.call($arity)}.class, $arity);
#end
		ALL_FUNCTIONS = ImmutableBiMap.copyOf(functions);
	}

	/**
	 * @return {@code true} if the given type is a {@link #ALL_FUNCTIONS known}
	 *         function type, {@code false} otherwise.<br>
	 *         Note that only the type itself and not its type hierarchy is
	 *         considered.
	 * @throws NullPointerException If {@code type} is {@code null}.
	 */
	public static boolean isFunction(Type type) {
		return ALL_FUNCTIONS.containsKey(Types.raw(type));
	}

#foreach($arity in [0..$maxArity])
	@SuppressWarnings({ "unchecked" })
	public static $generics.call($arity) $functionArity.call($arity)$generics.call($arity) match(final OpService ops, final String opName, $matchParams.call($arity))
	{
		return matchHelper(ops, opName, ${functionArity.call($arity)}.class, $nilArgs.call($arity));
	}

#end

	@SuppressWarnings({ "unchecked" })
	public static <O, T> Functions.ArityN<O> matchN(final OpService ops,
		final String opName, final Nil<O> outType, final Nil<?>... inTypes)
	{
		Object op = matchHelper(ops, opName, ALL_FUNCTIONS.get(inTypes.length),
			outType, inTypes);
		if (op instanceof Producer) {
			return new Arity0AsN<>((Producer<O>) op);
		}
#foreach($arity in [1..$maxArity])
		else if (op instanceof $functionArity.call($arity)) {
			return new Arity${arity}AsN<>((functionArity.call($arity)objectGenerics.call($arity)) op);
		}
#end
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchHelper(final OpService ops, final String opName,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) ops.findOp(opName, Nil.of(specialType), inTypes, outType);
	}

#foreach($arity in $arities)
	/**
	 * A ${arity}-arity specialization of {@link Function}.
	 *
#foreach($a in [1..$arity])
	 * @param <I${a}> the type of argument $a to the function
#end
	 * @param <O> the type of the output of the function
	 * @see Function
	 */
	@FunctionalInterface
	public interface Arity${arity}$generics.call($arity) {

		/**
		 * Applies this function to the given arguments.
		 *
#foreach($a in [1..$arity])
		 * @param in$a function argument $a
#end
		 * @return the function output
		 */
		O apply($applyParams.call($arity));

		/**
		 * Returns a composed function that first applies this function to its
		 * input, and then applies the {@code after} function to the result. If
		 * evaluation of either function throws an exception, it is relayed to the
		 * caller of the composed function.
		 *
		 * @param <O2> the type of output of the {@code after} function, and of the
		 *          composed function
		 * @param after the function to apply after this function is applied
		 * @return a composed function that first applies this function and then
		 *         applies the {@code after} function
		 * @throws NullPointerException if after is null
		 */
		default <O2> Arity${arity}$genericsO2.call($arity) andThen(Function<? super O, ? extends O2> after)
		{
			Objects.requireNonNull(after);
			return ($applyParams.call($arity)) -> after.apply(apply($applyArgs.call($arity)));
		}
	}

#end
	public interface ArityN<O> {

		O apply(Object... ins);

		Object getOp();
	}

	protected static class Arity0AsN<O> implements ArityN<O> {

		Producer<O> func;

		public Arity0AsN(Producer<O> func) {
			this.func = func;
		}

		@Override
		public O apply(Object... ins) {
			return func.create();
		}

		@Override
		public Object getOp() {
			return func;
		}

	}

#foreach($arity in [1..$maxArity])
	protected static class Arity${arity}AsN$generics.call($arity) implements ArityN<O> {

		$functionArity.call($arity)$objectGenerics.call($arity) func;

		public Arity${arity}AsN($functionArity.call($arity)$objectGenerics.call($arity) func) {
			this.func = func;
		}

		@Override
		public O apply(Object... ins) {
			return func.apply($insArgs.call($arity));
		}

		@Override
		public Object getOp() {
			return func;
		}

	}

#end
}
