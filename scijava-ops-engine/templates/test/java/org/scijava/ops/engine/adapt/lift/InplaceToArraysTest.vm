
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.scijava.function.Inplaces;
import org.scijava.ops.engine.AbstractTestEnvironment;
import org.scijava.ops.spi.OpCollection;
import org.scijava.ops.spi.OpField;

/**
 * Tests the adaptation of {@link Inplaces} running on a type into
 * {@link Inplaces} running on arrays of that type.
 * 
 * @author Gabriel Selzer
 */
public class InplaceToArraysTest extends AbstractTestEnvironment implements OpCollection {

	@BeforeAll
	public static void addNeededOps() {
		ops.register(new InplaceToArraysTest());
		ops.register(new InplaceToArrays());
	}

	/**
	 * @author Gabriel Selzer
	 */
	private class NumericalThing {

		private int number;

		public NumericalThing(int num) {
			number = num;
		}
		
		public void addNumber(int other) {
			number += other;
		}

		public int getNumber() {
			return number;
		}
	}
#foreach($arity in [1..$maxArity])
#foreach($a in [1..$arity])

	@OpField(names = "test.liftArrayI$a")
	public final $inplaceType.call($arity, $a)$numericalGenerics.call($arity) alterThing$inplaceSuffix.call($arity, $a) = (
		$mutateParams.call($arity, $a)) -> {
#foreach($param in $mutateValues.call($arity, $a))
#if( $arity == 1)
		io.addNumber(0);
#elseif( $param != "io")
		io.addNumber(${param}.getNumber());
#end
#end
	};

	@Test
	public void testInplace${inplaceSuffix.call($arity, $a)}ToArrays() {
		NumericalThing[] input = { new NumericalThing(0), new NumericalThing(1),
			new NumericalThing(2) };
		NumericalThing[] io = { new NumericalThing(0), new NumericalThing(1),
			new NumericalThing(2) };
			ops.op("test.liftArrayI$a") //
			.arity$arity() //
			.input($inputList.call($arity, $a)) //
			.${mutateMethod.call($arity, $a)}();

		for (int i = 0; i < input.length; i++) {
			Assertions.assertEquals($arity * i, io[i].getNumber());
		}
	}
#end
#end

}
