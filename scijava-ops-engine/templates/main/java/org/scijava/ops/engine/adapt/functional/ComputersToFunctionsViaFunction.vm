/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.functional;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.ops.engine.BaseOpHints.Adaptation;
import org.scijava.ops.spi.OpDependency;
import org.scijava.ops.spi.Op;
import org.scijava.ops.spi.OpClass;

/**
 * Collection of adaptation Ops to convert {@link Computers} into
 * {@link Functions} with the use of a {@link Function} that creates the output
 * using the first input as a model.
 * 
 * @author Gabriel Selzer
 */
public class ComputersToFunctionsViaFunction {

#foreach($arity in [1..$maxArity])
	@OpClass(names = "engine.adapt")
	public static class Computer${arity}ToFunction${arity}ViaFunction$generics.call($arity)
			implements Function<$computerArity.call($arity)$generics.call($arity), $functionArity.call($arity)$generics.call($arity)>,
			Op
		 {

		@OpDependency(name = "engine.create", hints={Adaptation.FORBIDDEN})
		Function<I#if($arity == 1)#{else}1#end, O> creator;

		/**
		 * @param computer the Computer to adapt
		 * @return computer, adapted into a Function
		 */
		@Override
		public $functionArity.call($arity)$generics.call($arity) apply($computerArity.call($arity)$generics.call($arity) computer) {
			return ($applyArgs.call($arity)) -> {
				O out = creator.apply(in#if($arity == 1)#{else}1#end);
				computer.compute($computeArgs.call($arity));
				return out;
			};
		}

	}

#end
}
