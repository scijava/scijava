
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.image.adapt.complexLift;

import net.imglib2.RandomAccessibleInterval;
import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.ops.spi.Op;
import org.scijava.ops.spi.OpDependency;

import java.util.function.BiFunction;
import java.util.function.Function;

public final class ComputersToFunctionsAndLift {

	private ComputersToFunctionsAndLift() {
		// prevent instantiation of static utility class
	}

#foreach($arity in $arities)
#foreach($rai in [1..$arity])

	/**
	 * Lifting function for mapping Computers Ops to Functions that operate on RAIs.
	 *
#foreach($a in [1..$arity])
	 * @param <I$a>
#if($a <= $rai)
	 *            Type of the $arityNames.call($a) RAI
#else
	 *            The $arityNames.call($a) parameter type
#end
#end
	 * @param <O>
	 *            Type of the output RAI
	 * @implNote op names='engine.adapt', priority='-100.'
	 */
	 public static class RAI$arity${rai}ComputerToFunctionAndLiftViaSource<#foreach($a in [1..$arity])I$a, #{end}O, #foreach($a in [1..$rai])RAII$a extends RandomAccessibleInterval<I$a>, #{end}RAIO extends RandomAccessibleInterval<O>>
		 implements Function<Computers.Arity$arity<#foreach($a in [1..$arity])I$a, #{end}O>, $functionNames.call($arity)<#foreach($a in [1..$arity])#if($a <= $rai)RAI#{end}I$a, #{end}RAIO>>,
			Op
	{
		@OpDependency(name = "engine.adapt", hints={"adaptation.FORBIDDEN"})
		Function<Computers.Arity${arity}<#foreach($a in [1..$arity])I$a, #{end}O>, Computers.Arity${arity}<#foreach($a in [1..$arity])#if($a <= $rai)RAI#{end}I$a, #{end}RAIO>> lifter;
		@OpDependency(name = "engine.adapt", hints={"adaptation.FORBIDDEN"})
		Function<Computers.Arity${arity}<#foreach($a in [1..$arity])#if($a <= $rai)RAI#{end}I$a, #{end}RAIO>, $functionNames.call($arity)<#foreach($a in [1..$arity])#if($a <= $rai)RAI#{end}I$a, #{end}RAIO>> adapter;

		/**
		 * @param computer the Computer to convert
		 * @return {@code computer} as a Function
		 */
		@Override
		public $functionNames.call($arity)<#foreach($a in [1..$arity])#if($a <= $rai)RAI#{end}I$a, #{end}RAIO> apply(Computers.Arity$arity<#foreach($a in [1..$arity])I$a, #{end}O> computer) {
			return adapter.apply(lifter.apply(computer));
		}
	}
#end
#end
}
