/*-
 * #%L
 * Java implementation of the SciJava Ops matching engine.
 * %%
 * Copyright (C) 2016 - 2024 SciJava developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

package org.scijava.ops.engine.matcher;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Inplaces;
import org.scijava.function.Producer;
import org.scijava.ops.api.OpBuilder;
import org.scijava.ops.engine.AbstractTestEnvironment;
import org.scijava.ops.engine.OpBuilderTestOps;
import org.scijava.types.GenericTyped;
import org.scijava.types.Nil;

/**
 * Tests whether the following Op types are wrapped by the Op matcher. We do
 * this by checking to make sure that they are a {@link GenericTyped}.
 *
 * @author Gabriel Selzer
 */
public class OpWrappersTest extends AbstractTestEnvironment {

	@BeforeAll
	public static void AddNeededOps() {
		ops.register(new OpBuilderTestOps());
	}

	@Test
	public void testWrapProducer() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Producer<Double> op = OpBuilder.matchFunction(ops, "test.addDoubles",
			nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction1() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Function<Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction2() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		BiFunction<Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction3() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity3<Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction4() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity4<Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction5() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity5<Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction6() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity6<Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction7() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity7<Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction8() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity8<Double, Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction9() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity9<Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction10() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity10<Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction11() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity11<Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction12() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity12<Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction13() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity13<Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction14() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity14<Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction15() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity15<Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapFunction16() {
		Nil<Double> nilDouble = Nil.of(Double.class);
		Functions.Arity16<Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double> op = //
			OpBuilder.matchFunction(ops, "test.addDoubles", //
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity1<double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity2<double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity3<double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity4<double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity5<double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity6<double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity7<double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity8<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer9() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity9<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer10() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity10<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer11() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity11<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer12() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity12<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer13() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity13<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer14() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity14<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer15() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity15<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapComputer16() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Computers.Arity16<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchComputer(ops, "test.addArrays", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity1<double[]> op = //
			OpBuilder.matchInplace(ops, "test.mulArrays1_1", nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace2_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity2_1<double[], double[]> op = //
			OpBuilder.matchInplace2_1(ops, "test.mulArrays2_1", nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace2_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity2_2<double[], double[]> op = //
			OpBuilder.matchInplace2_2(ops, "test.mulArrays2_2", nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace3_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity3_1<double[], double[], double[]> op = //
			OpBuilder.matchInplace3_1(ops, "test.mulArrays3_1", nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace3_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity3_2<double[], double[], double[]> op = //
			OpBuilder.matchInplace3_2(ops, "test.mulArrays3_2", nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace3_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity3_3<double[], double[], double[]> op = //
			OpBuilder.matchInplace3_3(ops, "test.mulArrays3_3", nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace4_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity4_1<double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace4_1(ops, "test.mulArrays4_1", nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace4_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity4_2<double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace4_2(ops, "test.mulArrays4_2", nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace4_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity4_3<double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace4_3(ops, "test.mulArrays4_3", nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace4_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity4_4<double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace4_4(ops, "test.mulArrays4_4", nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace5_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity5_1<double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace5_1(ops, "test.mulArrays5_1", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace5_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity5_2<double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace5_2(ops, "test.mulArrays5_2", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace5_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity5_3<double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace5_3(ops, "test.mulArrays5_3", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace5_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity5_4<double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace5_4(ops, "test.mulArrays5_4", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace5_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity5_5<double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace5_5(ops, "test.mulArrays5_5", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace6_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity6_1<double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace6_1(ops, "test.mulArrays6_1", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace6_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity6_2<double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace6_2(ops, "test.mulArrays6_2", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace6_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity6_3<double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace6_3(ops, "test.mulArrays6_3", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace6_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity6_4<double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace6_4(ops, "test.mulArrays6_4", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace6_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity6_5<double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace6_5(ops, "test.mulArrays6_5", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace6_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity6_6<double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace6_6(ops, "test.mulArrays6_6", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace7_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity7_1<double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace7_1(ops, "test.mulArrays7_1", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace7_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity7_2<double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace7_2(ops, "test.mulArrays7_2", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace7_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity7_3<double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace7_3(ops, "test.mulArrays7_3", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace7_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity7_4<double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace7_4(ops, "test.mulArrays7_4", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace7_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity7_5<double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace7_5(ops, "test.mulArrays7_5", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace7_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity7_6<double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace7_6(ops, "test.mulArrays7_6", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace7_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity7_7<double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace7_7(ops, "test.mulArrays7_7", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace8_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity8_1<double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace8_1(ops, "test.mulArrays8_1", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace8_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity8_2<double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace8_2(ops, "test.mulArrays8_2", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace8_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity8_3<double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace8_3(ops, "test.mulArrays8_3", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace8_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity8_4<double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace8_4(ops, "test.mulArrays8_4", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace8_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity8_5<double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace8_5(ops, "test.mulArrays8_5", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace8_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity8_6<double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace8_6(ops, "test.mulArrays8_6", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace8_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity8_7<double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace8_7(ops, "test.mulArrays8_7", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace8_8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity8_8<double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace8_8(ops, "test.mulArrays8_8", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace9_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity9_1<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace9_1(ops, "test.mulArrays9_1", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace9_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity9_2<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace9_2(ops, "test.mulArrays9_2", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace9_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity9_3<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace9_3(ops, "test.mulArrays9_3", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace9_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity9_4<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace9_4(ops, "test.mulArrays9_4", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace9_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity9_5<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace9_5(ops, "test.mulArrays9_5", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace9_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity9_6<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace9_6(ops, "test.mulArrays9_6", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace9_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity9_7<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace9_7(ops, "test.mulArrays9_7", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace9_8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity9_8<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace9_8(ops, "test.mulArrays9_8", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace9_9() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity9_9<double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace9_9(ops, "test.mulArrays9_9", nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_1<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_1(ops, "test.mulArrays10_1", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_2<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_2(ops, "test.mulArrays10_2", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_3<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_3(ops, "test.mulArrays10_3", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_4<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_4(ops, "test.mulArrays10_4", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_5<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_5(ops, "test.mulArrays10_5", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_6<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_6(ops, "test.mulArrays10_6", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_7<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_7(ops, "test.mulArrays10_7", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_8<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_8(ops, "test.mulArrays10_8", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_9() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_9<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_9(ops, "test.mulArrays10_9", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace10_10() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity10_10<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace10_10(ops, "test.mulArrays10_10", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_1<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_1(ops, "test.mulArrays11_1", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_2<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_2(ops, "test.mulArrays11_2", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_3<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_3(ops, "test.mulArrays11_3", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_4<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_4(ops, "test.mulArrays11_4", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_5<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_5(ops, "test.mulArrays11_5", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_6<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_6(ops, "test.mulArrays11_6", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_7<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_7(ops, "test.mulArrays11_7", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_8<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_8(ops, "test.mulArrays11_8", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_9() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_9<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_9(ops, "test.mulArrays11_9", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_10() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_10<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_10(ops, "test.mulArrays11_10", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace11_11() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity11_11<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace11_11(ops, "test.mulArrays11_11", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_1<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_1(ops, "test.mulArrays12_1", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_2<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_2(ops, "test.mulArrays12_2", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_3<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_3(ops, "test.mulArrays12_3", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_4<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_4(ops, "test.mulArrays12_4", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_5<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_5(ops, "test.mulArrays12_5", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_6<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_6(ops, "test.mulArrays12_6", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_7<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_7(ops, "test.mulArrays12_7", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_8<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_8(ops, "test.mulArrays12_8", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_9() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_9<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_9(ops, "test.mulArrays12_9", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_10() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_10<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_10(ops, "test.mulArrays12_10", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_11() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_11<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_11(ops, "test.mulArrays12_11", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace12_12() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity12_12<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace12_12(ops, "test.mulArrays12_12", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_1<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_1(ops, "test.mulArrays13_1", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_2<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_2(ops, "test.mulArrays13_2", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_3<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_3(ops, "test.mulArrays13_3", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_4<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_4(ops, "test.mulArrays13_4", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_5<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_5(ops, "test.mulArrays13_5", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_6<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_6(ops, "test.mulArrays13_6", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_7<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_7(ops, "test.mulArrays13_7", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_8<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_8(ops, "test.mulArrays13_8", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_9() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_9<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_9(ops, "test.mulArrays13_9", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_10() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_10<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_10(ops, "test.mulArrays13_10", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_11() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_11<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_11(ops, "test.mulArrays13_11", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_12() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_12<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_12(ops, "test.mulArrays13_12", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace13_13() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity13_13<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace13_13(ops, "test.mulArrays13_13", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_1<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_1(ops, "test.mulArrays14_1", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_2<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_2(ops, "test.mulArrays14_2", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_3<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_3(ops, "test.mulArrays14_3", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_4<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_4(ops, "test.mulArrays14_4", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_5<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_5(ops, "test.mulArrays14_5", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_6<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_6(ops, "test.mulArrays14_6", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_7<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_7(ops, "test.mulArrays14_7", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_8<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_8(ops, "test.mulArrays14_8", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_9() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_9<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_9(ops, "test.mulArrays14_9", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_10() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_10<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_10(ops, "test.mulArrays14_10", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_11() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_11<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_11(ops, "test.mulArrays14_11", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_12() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_12<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_12(ops, "test.mulArrays14_12", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_13() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_13<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_13(ops, "test.mulArrays14_13", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace14_14() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity14_14<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace14_14(ops, "test.mulArrays14_14", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_1<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_1(ops, "test.mulArrays15_1", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_2<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_2(ops, "test.mulArrays15_2", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_3<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_3(ops, "test.mulArrays15_3", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_4<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_4(ops, "test.mulArrays15_4", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_5<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_5(ops, "test.mulArrays15_5", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_6<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_6(ops, "test.mulArrays15_6", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_7<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_7(ops, "test.mulArrays15_7", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_8<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_8(ops, "test.mulArrays15_8", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_9() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_9<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_9(ops, "test.mulArrays15_9", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_10() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_10<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_10(ops, "test.mulArrays15_10", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_11() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_11<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_11(ops, "test.mulArrays15_11", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_12() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_12<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_12(ops, "test.mulArrays15_12", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_13() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_13<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_13(ops, "test.mulArrays15_13", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_14() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_14<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_14(ops, "test.mulArrays15_14", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace15_15() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity15_15<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace15_15(ops, "test.mulArrays15_15", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_1() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_1<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_1(ops, "test.mulArrays16_1", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_2() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_2<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_2(ops, "test.mulArrays16_2", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_3() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_3<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_3(ops, "test.mulArrays16_3", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_4() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_4<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_4(ops, "test.mulArrays16_4", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_5() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_5<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_5(ops, "test.mulArrays16_5", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_6() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_6<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_6(ops, "test.mulArrays16_6", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_7() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_7<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_7(ops, "test.mulArrays16_7", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_8() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_8<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_8(ops, "test.mulArrays16_8", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_9() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_9<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_9(ops, "test.mulArrays16_9", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_10() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_10<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_10(ops, "test.mulArrays16_10", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_11() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_11<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_11(ops, "test.mulArrays16_11", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_12() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_12<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_12(ops, "test.mulArrays16_12", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_13() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_13<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_13(ops, "test.mulArrays16_13", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_14() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_14<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_14(ops, "test.mulArrays16_14", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_15() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_15<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_15(ops, "test.mulArrays16_15", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

	@Test
	public void testWrapInplace16_16() {
		Nil<double[]> nilDouble = Nil.of(double[].class);
		Inplaces.Arity16_16<double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[], double[]> op = //
			OpBuilder.matchInplace16_16(ops, "test.mulArrays16_16", nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble, nilDouble, nilDouble, nilDouble,
				nilDouble, nilDouble, nilDouble);
		assertTrue(op instanceof GenericTyped);
	}

}
