
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/


package org.scijava.ops.engine.adapt.functional;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Arrays;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.scijava.ops.api.OpBuilder;
import org.scijava.ops.engine.AbstractTestEnvironment;
import org.scijava.ops.engine.OpBuilderTestOps;
import org.scijava.ops.engine.copy.CopyOpCollection;
import org.scijava.ops.engine.create.CreateOpCollection;
import org.scijava.types.Nil;

public class InplaceToFunctionAdaptTest extends AbstractTestEnvironment {

	@BeforeAll
	public static void AddNeededOps() {
		ops.register(new OpBuilderTestOps());
		ops.register(new CreateOpCollection());
		ops.register(new CopyOpCollection());
		Object[] adapters = objsFromNoArgConstructors(InplacesToFunctions.class.getDeclaredClasses());
		ops.register(adapters);
	}


#foreach($arity in [1..$maxArity])
#foreach($a in [1..$arity])
	/** Matches a ${arity}-arity inplace${a} as a function${arity} */
	@Test
	public void testInplace${arity}_${a}ToFunction${arity}() {
#foreach($a in [1..$arity])
		final double[] ${functionInputName.call($arity, $a)} = { 1, 2, 3 };
#end
		double[] expected = $inplaceExpectedArray.call($arity);
		final double[] output = ops.op("test.mulArrays${arity}_${a}") //
			.arity$arity().input($args.call($arity)) //
			.outType(new Nil<double[]>()
			{}).apply();
		assertTrue(Arrays.equals(output, expected));
	}

#end
#end
	private OpBuilder name(String opName) {
		return ops.op(opName);
	}
}
