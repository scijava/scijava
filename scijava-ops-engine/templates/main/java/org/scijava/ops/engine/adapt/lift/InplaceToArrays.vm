
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import java.util.function.Function;

import org.scijava.function.Inplaces;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpCollection;
import org.scijava.ops.spi.OpCollection;

/**
 * Collection of ops designed to lift {@link Inplaces} to operate
 * on arrays. TODO: multi-threading support
 * 
 * @author Gabriel Selzer
 */
public class InplaceToArrays$classGenerics.call($maxArity) implements OpCollection {

	private int minLength(Object[]... arrays) {
		int minLength = Integer.MAX_VALUE;
		for (Object[] array : arrays)
			if (array.length < minLength) minLength = array.length;
		return minLength;
	}
	
#foreach($arity in [1..$maxArity])
#foreach($a in [1..$arity])
	@OpField(names = "engine.adapt", params = "fromOp, toOp")
	public final Function<$inplaceType.call($arity, $a)$generics.call($arity, $a), $inplaceType.call($arity, $a)$arrayGenerics.call($arity, $a)> liftInplace$inplaceSuffix.call($arity, $a) =
		(inplace) -> {
			return ($mutateParams.call($arity, $a)) -> {
				int max = minLength($mutateParams.call($arity, $a));
				for (int i = 0; i < max; i++) {
					inplace.mutate($arraysAtPosI.call($arity, $a));
				}
			};
		};

#end
#end
}
