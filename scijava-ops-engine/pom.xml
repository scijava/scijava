<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.scijava</groupId>
		<artifactId>pom-scijava</artifactId>
		<version>40.0.0</version>
		<relativePath />
	</parent>

	<artifactId>scijava-ops-engine</artifactId>
	<version>1.0.1-SNAPSHOT</version>

	<name>SciJava Ops Engine</name>
	<description>Java implementation of the SciJava Ops matching engine.</description>
	<url>https://github.com/scijava/scijava-ops-engine</url>
	<inceptionYear>2016</inceptionYear>
	<organization>
		<name>SciJava</name>
		<url>https://scijava.org/</url>
	</organization>
	<licenses>
		<license>
			<name>Simplified BSD License</name>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>ctrueden</id>
			<name>Curtis Rueden</name>
			<roles>
				<role>founder</role>
				<role>lead</role>
				<role>reviewer</role>
				<role>support</role>
				<role>maintainer</role>
			</roles>
		</developer>
		<developer>
			<id>gselzer</id>
			<name>Gabriel Selzer</name>
			<roles>
				<role>founder</role>
				<role>debugger</role>
				<role>reviewer</role>
				<role>support</role>
			</roles>
		</developer>
		<developer>
			<id>hinerm</id>
			<name>Mark Hiner</name>
			<roles>
				<role>debugger</role>
				<role>reviewer</role>
				<role>support</role>
			</roles>
		</developer>
	</developers>
	<contributors>
		<contributor>
			<name>David Kolb</name>
			<roles><role>founder</role></roles>
			<properties><id>Treiblesschorle</id></properties>
		</contributor>
		<contributor>
			<name>Marcel Wiedenmann</name>
			<roles><role>founder</role></roles>
			<properties><id>MarcelWiedenmann</id></properties>
		</contributor>
		<contributor>
			<name>Edward Evans</name>
			<properties><id>elevans</id></properties>
		</contributor>
	</contributors>

	<mailingLists>
		<mailingList>
			<name>Image.sc Forum</name>
			<archive>https://forum.image.sc/tag/scijava</archive>
		</mailingList>
	</mailingLists>

	<scm>
		<connection>scm:git:https://github.com/scijava/scijava</connection>
		<developerConnection>scm:git:git@github.com:scijava/scijava</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/scijava/scijava</url>
	</scm>
	<issueManagement>
		<system>GitHub Issues</system>
		<url>https://github.com/scijava/scijava/issues</url>
	</issueManagement>
	<ciManagement>
		<system>GitHub Actions</system>
		<url>https://github.com/scijava/scijava/actions</url>
	</ciManagement>

	<properties>
		<main-class>org.scijava.ops.engine.Main</main-class>
		<package-name>org.scijava.ops.engine</package-name>

		<license.licenseName>bsd_2</license.licenseName>
		<license.copyrightOwners>SciJava developers.</license.copyrightOwners>

		<!--
		NB: Older versions of OpenJDK 11 have a bug in the javadoc tool,
		which causes errors like:

		[ERROR] javadoc: error - The code being documented uses packages
		in the unnamed module, but the packages defined in
		https://github.com/scijava/scijava/apidocs/ are in named modules.

		The most recent version of OpenJDK 11 known to have this problem
		is 11.0.8; the oldest version known to have fixed it is 11.0.17.
		Therefore, we set the minimum build JDK version to 11.0.17 here.
		-->
		<scijava.jvm.build.version>[11.0.17,)</scijava.jvm.build.version>
		<scijava.jvm.version>11</scijava.jvm.version>

		<scijava.ops.parse>true</scijava.ops.parse>

		<!--
			HACK: Allow individual tests to run successfully in IntelliJ. Avoids exception:
			java.lang.reflect.InaccessibleObjectException: Unable to make public
			static void org.scijava.ops.engine.AbstractTestEnvironment.setUp()
			accessible: module org.scijava.ops.engine does not "exports
			org.scijava.ops.engine" to unnamed module @402e37bc
		-->
		<scijava.surefire.args>--add-exports org.scijava.ops.engine/org.scijava.ops.engine=ALL-UNNAMED</scijava.surefire.args>

		<!-- TEMP: Can be removed once present in pom-scijava -->
		<scijava-collections.version>1.0.1-SNAPSHOT</scijava-collections.version>
		<scijava-common3.version>1.0.1-SNAPSHOT</scijava-common3.version>
		<scijava-discovery.version>1.0.1-SNAPSHOT</scijava-discovery.version>
		<scijava-function.version>1.0.1-SNAPSHOT</scijava-function.version>
		<scijava-indexer.version>1.0.1-SNAPSHOT</scijava-indexer.version>
		<scijava-meta.version>1.0.1-SNAPSHOT</scijava-meta.version>
		<scijava-ops-api.version>1.0.1-SNAPSHOT</scijava-ops-api.version>
		<scijava-ops-spi.version>1.0.1-SNAPSHOT</scijava-ops-spi.version>
		<scijava-priority.version>1.0.1-SNAPSHOT</scijava-priority.version>
		<scijava-progress.version>1.0.1-SNAPSHOT</scijava-progress.version>
		<scijava-struct.version>1.0.1-SNAPSHOT</scijava-struct.version>
		<scijava-taglets.version>1.0.1-SNAPSHOT</scijava-taglets.version>
		<scijava-testutil.version>1.0.1-SNAPSHOT</scijava-testutil.version>
		<scijava-types.version>1.0.1-SNAPSHOT</scijava-types.version>
	</properties>

	<dependencies>
		<!-- SciJava dependencies -->
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>parsington</artifactId>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-collections</artifactId>
			<version>${scijava-collections.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-common3</artifactId>
			<version>${scijava-common3.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-meta</artifactId>
			<version>${scijava-meta.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-ops-api</artifactId>
			<version>${scijava-ops-api.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-ops-spi</artifactId>
			<version>${scijava-ops-spi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-discovery</artifactId>
			<version>${scijava-discovery.version}</version>
		</dependency>
		<dependency>
			<groupId> org.scijava</groupId>
			<artifactId>scijava-function</artifactId>
			<version>${scijava-function.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-priority</artifactId>
			<version>${scijava-priority.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-progress</artifactId>
			<version>${scijava-progress.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-struct</artifactId>
			<version>${scijava-struct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-types</artifactId>
			<version>${scijava-types.version}</version>
		</dependency>

		<!-- Third-party dependencies -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>org.javassist</groupId>
			<artifactId>javassist</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.yaml</groupId>
			<artifactId>snakeyaml</artifactId>
		</dependency>

		<!-- Test scope dependencies -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-testutil</artifactId>
			<version>${scijava-testutil.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.scijava</groupId>
							<artifactId>scijava-ops-indexer</artifactId>
							<version>${scijava-indexer.version}</version>
						</path>
					</annotationProcessorPaths>
					<fork>true</fork>
					<compilerArgs>
						<arg>-Ascijava.ops.parse="${scijava.ops.parse}"</arg>
						<arg>-Ascijava.ops.opVersion="${project.version}"</arg>
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<links>
						<link>https://javadoc.scijava.org/Java11/</link>
						<link>https://javadoc.scijava.org/SCIFIO/</link>
						<link>https://javadoc.scijava.org/SciJava/</link>
						<link>https://javadoc.scijava.org/Guava/</link>
						<link>https://javadoc.scijava.org/Javassist/</link>
					</links>
					<tagletArtifacts>
						<tagletArtifact>
							<groupId>org.scijava</groupId>
							<artifactId>scijava-taglets</artifactId>
							<version>${scijava-taglets.version}</version>
						</tagletArtifact>
					</tagletArtifacts>
					<tags>
						<tag>
							<name>implNote</name>
							<placement>a</placement>
							<head>Implementation Note:</head>
						</tag>
					</tags>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-package-rules</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<phase>test</phase>
						<configuration>
							<rules>
								<NoPackageCyclesRule implementation="org.scijava.maven.plugin.enforcer.NoPackageCyclesRule" />
								<NoSubpackageDependenceRule implementation="org.scijava.maven.plugin.enforcer.NoSubpackageDependenceRule" />
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>union-op-yaml</id>
						<phase>process-test-classes</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<concat destfile="${project.basedir}/target/test-classes/ops.yaml" append="true">
									<fileset file="${project.basedir}/target/classes/ops.yaml" />
								</concat>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>only-eclipse-scijava</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<!--
						Configure the Eclipse m2e plugin to support needed plugins.
						-->
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<!--
							NB: Eclipse cannot handle an overridden version property here!
							The version needs to stay hardcoded at 1.0.0.
							-->
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions combine.children="append">
										<!--
										NB: Make Eclipse union the metadata indices on every build; see:
										https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html
										-->
										<pluginExecution>
											<pluginExecutionFilter>
												<artifactId>maven-antrun-plugin</artifactId>
												<goals>
													<goal>run</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute>
													<runOnConfiguration>true</runOnConfiguration>
													<!--
													NB: You might think we could run the annotations
													union script once only, at configuration time.
													Unfortunately, when configuration happens in Eclipse,
													the plugin annotations have not yet been generated.
													So let's redo the union on every incremental build.
													That'll show 'em!
													-->
													<runOnIncremental>true</runOnIncremental>
												</execute>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>
</project>
