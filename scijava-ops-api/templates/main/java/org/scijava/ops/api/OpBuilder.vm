/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.api;

import java.lang.reflect.Type;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Inplaces;
import org.scijava.function.Producer;
import org.scijava.types.Any;
import org.scijava.types.Nil;
import org.scijava.types.Types;

/**
 * Convenience class for looking up and/or executing ops using a builder
 * pattern. Typical entry point is through {@link OpEnvironment#[[#op(String)]]#},
 * which contains full usage information.
 * <p>
 * Note that the intermediate builder steps use the following acronyms:
 * </p>
 * <ul>
 *   <li><b>IV/OV:</b> Input/Output Value. Indicates instances will be used for matching; ideal if you want to directly run the matched Op, e.g. via <code>apply</code>, <code>compute</code>, <code>mutate</code> or <code>create</code> methods.</li>
 *   <li><b>IT/OT:</b> Input/Output Types. Indicates {@code Classes} will be used for matching; matching will produce an Op instance that can then be (re)used. There are two "Type" options: raw types or {@code Nil}s. If you are matching using a parameterized type use the {@code Nil} option to preserve the type parameter.</li>
 *   <li><b>OU:</b> Output Unknown. Indicates an output type/value has not been specified to the builder yet. The output, if any, will simply be an {@code Object}</li>
 * </ul>
 *
 * @author Curtis Rueden
 * @author Gabriel Selzer
 * @author Mark Hiner
 */
public class OpBuilder {

	private final OpEnvironment env;
	private final String opName;
	private Hints hints;

	public OpBuilder(final OpEnvironment env, final String opName) {
		this(env, opName, env.getDefaultHints());
	}

	public OpBuilder(final OpEnvironment env, final String opName, final Hints hints) {
		this.env = env;
		this.opName = opName;
		this.hints = hints;
	}

	/**
	 * Matches with this builder will use the given pre-allocated output instance.
	 *
	 * @see #[[#create()]]# To match then immediately run a Producer Op without specifying its type, creating an Object.
	 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
	 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
	 * @see #[[#producer()]]# For a reusable Op to create naively-typed Objects without re-matching.
	 */
	public <O> Arity0_OV<O> output(final O out) {
		return new Arity0_OV<>(out);
	}

	/**
	 * Matches with this builder will use the indicated output class.
	 *
	 * @see #[[#create()]]# To match then immediately run a Producer Op without specifying its type, creating an Object.
	 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
	 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
	 * @see #[[#producer()]]# For a reusable Op to create naively-typed Objects without re-matching.
	 */
	public <O> Arity0_OT<O> outType(final Class<O> outType) {
		return outType(Nil.of(outType));
	}

	/**
	 * Matches with this builder will use the output type of the indicated {@code Nil}'s generic parameter.
	 *
	 * @see #[[#create()]]# To match then immediately run a Producer Op without specifying its type, creating an Object.
	 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
	 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
	 * @see #[[#producer()]]# For a reusable Op to create naively-typed Objects without re-matching.
	 */
	public <O> Arity0_OT<O> outType(final Nil<O> outType) {
		return new Arity0_OT<>(outType);
	}

	/**
	 * Match a {@link Producer} op, based on the choices made with this builder, for creating {@code Object} instances.
	 *
	 * @return An instance of the matched op, e.g. for reuse.
	 *
	 * @throws OpMatchingException if the Op request cannot be satisfied.
	 *
	 * @see #[[#create()]]# To match then immediately run a Producer Op without specifying its type, creating an Object.
	 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
	 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
	 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
	 */
	public Producer<?> producer() {
		final Nil<Producer<Object>> specialType = new Nil<>() {

			@Override
			public Type getType() {
				return Types.parameterize(Producer.class, new Type[] {
					Object.class });
			}
		};
		return env.op(opName, specialType, new Nil<?>[0], Nil.of(
			Object.class), OpBuilder.this.hints);
	}

	/**
	 * Match then immediately run a type-unsafe {@link Producer} op and get its output.
	 *
	 * @return The {@code Object} created by this op
	 *
	 * @throws OpMatchingException if the Op request cannot be satisfied.
	 *
	 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
	 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
	 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
	 * @see #[[#producer()]]# For a reusable Op to create naively-typed Objects without re-matching.
	 */
	public Object create() {
		return producer().create();
	}

	/**
	 * Finds all Ops matching the current partial OpBuilder request
	 * @return a {@link String} with a simple entry for each Op satisfying the partial request
	 */
	public String help() {
		return env.help(new PartialOpRequest(opName, null));
	}

	/**
	 * Finds all Ops matching the current partial OpBuilder request
	 * @return a {@link String} with a verbose entry for each Op satisfying the partial request
	 */
	public String helpVerbose() {
		return env.helpVerbose(new PartialOpRequest(opName, null));
	}

	/** Set the Hints instance for this builder */
	public void setHints(Hints hints) { this.hints = hints; }

	/** Get the Hints instance for this builder */
	public Hints hints() { return hints; }

#foreach($arity in $arities)
	/** Specifies $arity input by value. */
	public $genericsWithoutOutput.call($arity) Arity${arity}_IV_OU$genericsWithoutOutput.call($arity) input($inputObjectsArgs.call($arity))
	{
		return new Arity${arity}_IV_OU<>($inputObjects.call($arity));
	}

	/** Specifies $arity input by raw type. */
	public $genericsWithoutOutput.call($arity) Arity${arity}_IT_OU$genericsWithoutOutput.call($arity) inType($inputClassesArgs.call($arity))
	{
		return inType($inputClassesToTypes.call($arity));
	}

	/** Specifies $arity input by generic type. */
	public $genericsWithoutOutput.call($arity) Arity${arity}_IT_OU$genericsWithoutOutput.call($arity) inType($inputTypesArgs.call($arity))
	{
		return new Arity${arity}_IT_OU<>($inputTypes.call($arity));
	}
#end

	// -- Helper methods --

	@SuppressWarnings({ "unchecked" })
	private <T> Nil<T> type(Object obj) {
		// FIXME: This vacuous T and unsafe cast is wrong.
		return (Nil<T>) Nil.of(env.genericType(obj));
	}

	private void checkComputerRefs(Object... objects) {
		checkRefs(objects.length - 1, "Output", objects);
	}

	private void checkInplaceRefs(int inplaceNo, Object... objects) {
		checkRefs(inplaceNo - 1, "Mutable input " + inplaceNo, objects);
	}

	private void checkRefs(int mutableIndex, String label, Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i == mutableIndex) continue;
			if (objects[mutableIndex] == objects[i]) {
				throw new IllegalArgumentException(label +
					" cannot be same reference as input #" + (i + 1));
			}
		}
	}

	// @formatter:off
	/*
	 * -- HELPER CLASSES --
	 * 
	 * For each arity, there are multiple conditions:
	 * * Input TYPES are given (IT) 
	 * 	1) The output is unspecified (OU): 
	 * 		a) matchable: Function, Inplace
	 * 		b) runnable: none
	 * 	2) The output type is given (OT): 
	 * 		a) matchable: Function, Computer
	 * 		b) runnable: none
	 *  
	 * * Input VALUES are given (IV) (N.B. this case applies for Arity0):
	 * 	1) The output is unspecified (OU): 
	 * 		a) matchable: Function, Inplace
	 * 		b) runnable: apply, mutate
	 * 	2) The output type is given (OT): 
	 * 		a) matchable: Function, Computer
	 * 		b) runnable: apply
	 * 	3) The output value is given (OV): 
	 * 		a) matchable: Computer
	 *  	b) runnable: compute
	 */
	// @formatter:on


	/**
	 * Abstract superclasses for all Arities.
	 */
	private abstract class Arity {
		/** Get the Hints instance for this builder */
		public void setHints(Hints hints) { OpBuilder.this.setHints(hints); }

		/** Get the Hints instance for this builder */
		public Hints hints() { return OpBuilder.this.hints(); }
	}

	/**
	 * Builder with arity 0, output type given.
	 *
	 * @author Curtis Rueden
	 * @param <O> The type of the output.
	 */
	public final class Arity0_OT<O> extends Arity {

		private final Nil<O> outType;

		public Arity0_OT(final Nil<O> outType) {
			this.outType = outType;
		}

		/**
		 * Match a {@link Producer} op, based on the choices made with this builder, for creating {@code O}-typed instances.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#computer()]]# For a reusable Op to process pre-allocated outputs without re-matching.
		 * @see #[[#create()]]# To match then immediately run a Producer Op, creating an instance of this builder's output type.
		 */
		public Producer<O> producer() {
			final Nil<Producer<O>> specialType = new Nil<>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] { outType
						.getType() });
				}
			};
			return env.op(opName, specialType, new Nil<?>[0], outType, OpBuilder.this.hints);
		}

		/**
		 * Match a {@link Computers} op, based on the choices made with this builder, for operating on pre-allocated output.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#create()]]# To match then immediately run a Producer Op, creating an instance of this builder's output type.
		 * @see #[[#producer()]]# For a reusable Op to create objects of this builder's output type without re-matching.
		 */
		public Computers.Arity0<O> computer() {
			return matchComputer(env, opName, outType, OpBuilder.this.hints);
		}

		/**
		 * Match then immediately run a {@link Producer} op and get its output.
		 *
		 * @return The {@code O} created by this op
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#computer()]]# For a reusable Op to process pre-allocated outputs without re-matching.
		 * @see #[[#producer()]]# For a reusable Op to create objects of this builder's output type without re-matching.
		 */
		public O create() {
			return producer().create();
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a simple entry for each Op satisfying the partial request
		 */
		public String help() {
			return env.help(new PartialOpRequest(opName, new Nil<?>[] {}, outType));
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a verbose entry for each Op satisfying the partial request
		 */
		public String helpVerbose() {
			return env.helpVerbose(new PartialOpRequest(opName, new Nil<?>[] {}, outType));
		}
	}

	/**
	 * Builder with arity 0, output value given.
	 *
	 * @author Curtis Rueden
	 * @param <O> The type of the output.
	 */
	public final class Arity0_OV<O> extends Arity {

		private final O out;

		public Arity0_OV(final O out) {
			this.out = out;
		}

		/**
		 * Match a {@link Computers} op, based on the choices made with this builder, for operating on pre-allocated output.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#compute()]]# To match then immediately run a Computer Op using this builder's pre-allocated output.
		 */
		public Computers.Arity0<O> computer() {
			return matchComputer(env, opName, type(out), OpBuilder.this.hints);
		}

		/**
		 * Match then immediately run a {@link Computers} op on the provided output container.
		 *
		 * @see #[[#computer()]]# For a reusable Op to process pre-allocated outputs without re-matching.
		 */
		public void compute() {
			computer().compute(out);
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a simple entry for each Op satisfying the partial request
		 */
		public String help() {
			return env.help(new PartialOpRequest(opName, new Nil<?>[] {}, type(out)));
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a verbose entry for each Op satisfying the partial request
		 */
		public String helpVerbose() {
			return env.helpVerbose(new PartialOpRequest(opName, new Nil<?>[] {}, type(out)));
		}
	}

#foreach($arity in $arities)
	/**
	 * Builder with arity $arity, input type given, output type given.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 * @param <O> The type of the output.
	 */
	public final class Arity${arity}_IT_OT$generics.call($arity) extends Arity {

#foreach($a in [1..$arity])
		private final Nil<I$a> in${a}Type;
#end
		private final Nil<O> outType;

		public Arity${arity}_IT_OT($inputTypesArgsWithOutput.call($arity))
		{
#foreach($a in [1..$arity])			
			this.in${a}Type = in${a}Type;
#end
			this.outType = outType;
		}

		/**
		 * Match a {@link Functions} op, based on the choices made with this builder.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#computer()]]# For a reusable Op to process pre-allocated outputs without re-matching.
		 */
		public $functionArity.call($arity)$generics.call($arity) function() {
			return matchFunction(env, opName, $inputTypesWithOutput.call($arity), OpBuilder.this.hints);
		}

		/**
		 * Match a {@link Computers} op, based on the choices made with this builder, for operating on pre-allocated output.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 */
		public Computers.Arity${arity}$generics.call($arity) computer() {
			return matchComputer(env, opName, $inputTypesWithOutput.call($arity), OpBuilder.this.hints);
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a simple entry for each Op satisfying the partial request
		 */
		public String help() {
			return env.help(new PartialOpRequest(opName, new Nil<?>[] {$inputTypes.call($arity)}, outType));
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a verbose entry for each Op satisfying the partial request
		 */
		public String helpVerbose() {
			return env.helpVerbose(new PartialOpRequest(opName, new Nil<?>[] {$inputTypes.call($arity)}, outType));
		}
	}

	/**
	 * Builder with arity $arity, input type given, output unspecified.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 */
	public final class Arity${arity}_IT_OU$genericsWithoutOutput.call($arity) extends Arity {

#foreach($a in [1..$arity])
		private final Nil<I$a> in${a}Type;
#end

		public Arity${arity}_IT_OU($inputTypesArgs.call($arity))
		{
#foreach($a in [1..$arity])			
			this.in${a}Type = in${a}Type;
#end
		}

		/**
		 * Matches with this builder will use the indicated output class.
		 *
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 * @see #inplace#if ( $arity > 1 )1#end() For a reusable Op that modifies a provided input parameter in-place.
		 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
		 */
		public <O> Arity${arity}_IT_OT$generics.call($arity) outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		/**
		 * Matches with this builder will use the output type of the indicated {@code Nil}'s generic parameter.
		 *
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 * @see #inplace#if ( $arity > 1 )1#end() For a reusable Op that modifies a provided input parameter in-place.
		 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
		 */
		public <O> Arity${arity}_IT_OT$generics.call($arity) outType(final Nil<O> outType) {
			return new Arity${arity}_IT_OT<>($inputTypesWithOutput.call($arity));
		}

		/**
		 * Match a {@link Functions} op based on the choices made with this builder.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
		 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
		 * @see #inplace#if ( $arity > 1 )1#end() For a reusable Op that modifies a provided input parameter in-place.
		 */
		public $functionArity.call($arity)$genericsWildcardFunction.call($arity) function() {
			return matchFunction(env, opName, $inputTypes.call($arity), Nil.of(Any.class), OpBuilder.this.hints);
		}

#foreach($a in [1..$arity])
		/**
		 * Match an {@link Inplaces} op, based on the choices made with this builder, to mutate the $a#if ( $a == 1 )st#elseif ( $a == 2 )nd#elseif ( $a == 3 )rd#{else}th#end parameter.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
		 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
		 */
		public Inplaces.Arity$inplaceSuffix.call($arity, $a)$genericsWithoutOutput.call($arity) inplace${inplaceMatchNumber.call($arity, $a)}() {
			return $matchName.call($arity, $a)(env, opName, $inputTypes.call($arity), hints);
		}

#end
		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a simple entry for each Op satisfying the partial request
		 */
		public String help() {
			return env.help(new PartialOpRequest(opName, new Nil<?>[] {$inputTypes.call($arity)}));
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a verbose entry for each Op satisfying the partial request
		 */
		public String helpVerbose() {
			return env.helpVerbose(new PartialOpRequest(opName, new Nil<?>[] {$inputTypes.call($arity)}));
		}
	}

	/**
	 * Builder with arity ${arity}, input value given, output type given.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 * @param <O> The type of the output.
	 */
	public final class Arity${arity}_IV_OT$generics.call($arity) extends Arity {

#foreach($a in [1..$arity])
		private final I$a in${a};
#end
		private final Nil<O> outType;

		public Arity${arity}_IV_OT($inputObjectsArgs.call($arity), final Nil<O> outType)
		{
#foreach($a in [1..$arity])
			this.in$a = in$a;
#end
			this.outType = outType;
		}

		/**
		 * Match a {@link Functions} op based on the choices made with this builder.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#apply()]]# To match then immediately run a Function Op using the input values provided to this builder.
		 * @see #[[#computer()]]# For a reusable Op to process pre-allocated outputs without re-matching.
		 */
		public $functionArity.call($arity)$generics.call($arity) function() {
			return matchFunction(env, opName, $inputTypesFromArgs.call($arity), outType, OpBuilder.this.hints);
		}
	
		/**
		 * Match a {@link Computers} op, based on the choices made with this builder, for operating on pre-allocated output.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#apply()]]# To match then immediately run a Function Op using the input values provided to this builder.
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 */
		public Computers.Arity${arity}$generics.call($arity) computer() {
			return matchComputer(env, opName, $inputTypesFromArgs.call($arity), outType, OpBuilder.this.hints);
		}

		/**
		 * Match then immediately run a {@link Functions} op and get its output.
		 *
		 * @return The output of this function
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#computer()]]# For a reusable Op to process pre-allocated outputs without re-matching.
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 */
		public O apply() {
			return function().apply($inputObjects.call($arity));
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a simple entry for each Op satisfying the partial request
		 */
		public String help() {
			return env.help(new PartialOpRequest(opName, new Nil<?>[] {$inputTypesFromArgs.call($arity)}, outType));
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a verbose entry for each Op satisfying the partial request
		 */
		public String helpVerbose() {
			return env.helpVerbose(new PartialOpRequest(opName, new Nil<?>[] {$inputTypesFromArgs.call($arity)}, outType));
		}
	}

	/**
	 * Builder with arity $arity, input value given, output unspecified.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 */
	public final class Arity${arity}_IV_OU$genericsWithoutOutput.call($arity) extends Arity {

#foreach($a in [1..$arity])
		private final I$a in$a;
#end

		public Arity${arity}_IV_OU($inputObjectsArgs.call($arity))
		{
#foreach($a in [1..$arity])
			this.in$a = in$a;
#end
		}

		/**
		 * Matches with this builder will use the given pre-allocated output instance.
		 *
		 * @see #[[#apply()]]# To match then immediately run a Function Op using the input values provided to this builder.
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 * @see #inplace#if ( $arity > 1 )1#end() For a reusable Op that modifies a provided input parameter in-place.
		 * @see #mutate#if ( $arity > 1 )1#end() To match then immediately run an Inplace Op modifying a provided input parameter.
		 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
		 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
		 */
		public <O> Arity${arity}_IV_OV$generics.call($arity) output(final O out) {
			checkComputerRefs($inputObjects.call($arity), out);
			return new Arity${arity}_IV_OV<>($inputObjects.call($arity), out);
		}

		/**
		 * Matches with this builder will use the indicated output class.
		 *
		 * @see #[[#apply()]]# To match then immediately run a Function Op using the input values provided to this builder.
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 * @see #inplace#if ( $arity > 1 )1#end() For a reusable Op that modifies a provided input parameter in-place.
		 * @see #mutate#if ( $arity > 1 )1#end() To match then immediately run an Inplace Op modifying a provided input parameter.
		 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
		 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
		 */
		public <O> Arity${arity}_IV_OT$generics.call($arity) outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		/**
		 * Matches with this builder will use the output type of the indicated {@code Nil}'s generic parameter.
		 *
		 * @see #[[#apply()]]# To match then immediately run a Function Op using the input values provided to this builder.
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 * @see #inplace#if ( $arity > 1 )1#end() For a reusable Op that modifies a provided input parameter in-place.
		 * @see #mutate#if ( $arity > 1 )1#end() To match then immediately run an Inplace Op modifying a provided input parameter.
		 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
		 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
		 */
		public <O> Arity${arity}_IV_OT$generics.call($arity) outType(final Nil<O> outType) {
			return new Arity${arity}_IV_OT<>($inputObjects.call($arity), outType);
		}

		/**
		 * Match a {@link Functions} op based on the choices made with this builder.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#apply()]]# To match then immediately run a Function Op using the input values provided to this builder.
		 * @see #inplace#if ( $arity > 1 )1#end() For a reusable Op that modifies a provided input parameter in-place.
		 * @see #mutate#if ( $arity > 1 )1#end() To match then immediately run an Inplace Op modifying a provided input parameter.
		 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
		 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
		 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
		 */
		public $functionArity.call($arity)$genericsWildcardFunction.call($arity) function() {
			return matchFunction(env, opName, $inputTypesFromArgs.call($arity), Nil.of(Any.class), OpBuilder.this.hints);
		}

#foreach($a in [1..$arity])
		/**
		 * Match an {@link Inplaces} op, based on the choices made with this builder, to mutate the $a#if ( $a == 1 )st#elseif ( $a == 2 )nd#elseif ( $a == 3 )rd#{else}th#end parameter.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#apply()]]# To match then immediately run a Function Op using the input values provided to this builder.
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 * @see #mutate#if ( $arity > 1 )1#end() To match then immediately run an Inplace Op modifying a provided input parameter.
		 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
		 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
		 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
		 */
		public Inplaces.Arity$inplaceSuffix.call($arity, $a)$genericsWithoutOutput.call($arity) inplace${inplaceMatchNumber.call($arity, $a)}() {
			checkInplaceRefs($a, $inputObjects.call($arity));
			return $matchName.call($arity, $a)(env, opName, $inputTypesFromArgs.call($arity), hints);
		}

#end
		/**
		 * Match then immediately run a type-unsafe {@link Functions} op and get its output.
		 *
		 * @return The output of this function
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 * @see #inplace#if ( $arity > 1 )1#end() For a reusable Op that modifies a provided input parameter in-place.
		 * @see #mutate#if ( $arity > 1 )1#end() To match then immediately run an Inplace Op modifying a provided input parameter.
		 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
		 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
		 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
		 */
		public Object apply() {
			return function().apply($inputObjects.call($arity));
		}

#foreach($a in [1..$arity])
		/**
		 * Match then immediately run an {@link Inplaces} op to mutate the $a#if ( $a == 1 )st#elseif ( $a == 2 )nd#elseif ( $a == 3 )rd#{else}th#end parameter.
		 *
		 * @see #[[#apply()]]# To match then immediately run a Function Op using the input values provided to this builder.
		 * @see #[[#function()]]# For a reusable Op that generates output instances based on its inputs.
		 * @see #inplace#if ( $arity > 1 )1#end() For a reusable Op that modifies a provided input parameter in-place.
		 * @see #[[#output(Object)]]# To specify a concrete output instance. (e.g. pre-allocated for Computers)
		 * @see #[[#outType(Class)]]# To specify the output type without providing a concrete instance.
		 * @see #[[#outType(Nil)]]# To specify the output type, preserving its generic parameters.
		 */
		public void mutate${inplaceMatchNumber.call($arity, $a)}() {
			inplace${inplaceMatchNumber.call($arity, $a)}().mutate($inputObjects.call($arity));
		}

#end
		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a simple entry for each Op satisfying the partial request
		 */
		public String help() {
			return env.help(new PartialOpRequest(opName, new Nil<?>[] {$inputTypesFromArgs.call($arity)}));
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a verbose entry for each Op satisfying the partial request
		 */
		public String helpVerbose() {
			return env.helpVerbose(new PartialOpRequest(opName, new Nil<?>[] {$inputTypesFromArgs.call($arity)}));
		}
	}

	/**
	 * Builder with arity $arity, input value given, output value given.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 */
	public final class Arity${arity}_IV_OV${generics.call($arity)} extends Arity {

#foreach($a in [1..$arity])
		private final I$a in$a;
#end
		private final O out;

		public Arity${arity}_IV_OV($inputObjectsArgs.call($arity), final O out)
		{
#foreach($a in [1..$arity])
			this.in$a = in$a;
#end
			this.out = out;
		}

		/**
		 * Match a {@link Computers} op, based on the choices made with this builder, for operating on pre-allocated output.
		 *
		 * @return An instance of the matched op, e.g. for reuse.
		 *
		 * @throws OpMatchingException if the Op request cannot be satisfied.
		 *
		 * @see #[[#compute()]]# To match then immediately run a Computer Op using this builder's pre-allocated output.
		 */
		public Computers.Arity${arity}${generics.call($arity)} computer() {
			return matchComputer(env, opName, $inputTypesFromArgs.call($arity), type(out), OpBuilder.this.hints);
		}

		/**
		 * Match then immediately run a {@link Computers} op using the provided pre-allocated output.
		 *
		 * @see #[[#computer()]]# For a reusable Op to process pre-allocated outputs without re-matching.
		 */
		public void compute() {
			computer().compute($inputObjects.call($arity), out);
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a simple entry for each Op satisfying the partial request
		 */
		public String help() {
			return env.help(new PartialOpRequest(opName, new Nil<?>[] {$inputTypesFromArgs.call($arity)}, type(out)));
		}

		/**
		 * Finds all Ops matching the current partial OpBuilder request
		 * @return a {@link String} with a verbose entry for each Op satisfying the partial request
		 */
		public String helpVerbose() {
			return env.helpVerbose(new PartialOpRequest(opName, new Nil<?>[] {$inputTypesFromArgs.call($arity)}, type(out)));
		}
	}
#end

#foreach($arity in [0..$maxArity])
	/**
	 * Static utility method to match a {@link Functions} op with $arity input#if ( $arity != 1 )s#end.
	 *
	 * @return An instance of the matched op, e.g. for reuse.
	 *
	 * @throws OpMatchingException if the Op request cannot be satisfied.
	 *
	 * @see #[[#matchComputer]]#(OpEnvironment, String#foreach( $i in [1..$arity] ), Nil#end, Nil) For a reusable Op to process pre-allocated outputs without re-matching.
#if ( $arity > 0 )	 * @see #[[#]]#$matchName.call($arity, 1)(OpEnvironment, String#foreach( $i in [1..$arity] ), Nil#end) For a reusable Op that modifies a provided input parameter in-place.
#end
	 */
	@SuppressWarnings({ "unchecked" })
	public static $generics.call($arity) $functionArity.call($arity)$generics.call($arity) matchFunction(final OpEnvironment env, final String opName, $inputTypesArgsWithOutput.call($arity))
	{
		return matchFunctionHelper(env, opName, ${functionArity.call($arity)}.class, outType#if( $arity == 0)#{else}, #end$inputTypes.call($arity));
	}

#end
#foreach($arity in [0..$maxArity])
	/**
	 * As {@link OpBuilder#matchFunction}, but match using the provided {@code Hints}.
	 */
	@SuppressWarnings({ "unchecked" })
	public static $generics.call($arity) $functionArity.call($arity)$generics.call($arity) matchFunction(final OpEnvironment env, final String opName, $inputTypesArgsWithOutput.call($arity), final Hints hints)
	{
		return matchFunctionHelper(env, opName, hints, ${functionArity.call($arity)}.class, outType#if( $arity == 0)#{else}, #end$inputTypes.call($arity));
	}

#end
	@SuppressWarnings({ "unchecked" })
	private static <T> T matchFunctionHelper(final OpEnvironment env, final String opName,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType);
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchFunctionHelper(final OpEnvironment env, final String opName, final Hints hints,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType, hints);
	}

#foreach($arity in [0..$maxArity])
	/**
	 * Static utility method to match a {@link Computers} op with $arity input#if ( $arity != 1 )s#end for operating on pre-allocated output.
	 *
	 * @return An instance of the matched op, e.g. for reuse.
	 *
	 * @throws OpMatchingException if the Op request cannot be satisfied.
	 *
	 * @see #[[#matchFunction]]#(OpEnvironment, String#foreach( $i in [1..$arity] ), Nil#end, Nil) For a reusable Op that generates output instances based on its inputs.
#if ( $arity > 0 )	 * @see #[[#]]#$matchName.call($arity, 1)(OpEnvironment, String#foreach( $i in [1..$arity] ), Nil#end) For a reusable Op that modifies a provided input parameter in-place.
#end
	 */
	@SuppressWarnings("unchecked")
	public static $generics.call($arity) $computerArity.call($arity)$generics.call($arity) matchComputer(final OpEnvironment env, final String opName, $inputTypesArgsWithOutput.call($arity))
	{
		return matchComputerHelper(env, opName, ${computerArity.call($arity)}.class, outType#if( $arity == 0)#{else}, #end$inputTypes.call($arity));
	}

#end
#foreach($arity in [0..$maxArity])
	/**
	 * As {@link OpBuilder#matchComputer}, but match using the provided {@code Hints}.
	 */
	@SuppressWarnings("unchecked")
	public static $generics.call($arity) $computerArity.call($arity)$generics.call($arity) matchComputer(final OpEnvironment env, final String opName, $inputTypesArgsWithOutput.call($arity), final Hints hints)
	{
		return matchComputerHelper(env, opName, hints, ${computerArity.call($arity)}.class, outType#if( $arity == 0)#{else}, #end$inputTypes.call($arity));
	}

#end
	@SuppressWarnings({ "unchecked" })
	private static <T> T matchComputerHelper(final OpEnvironment env, final String opName, final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		final Nil<?>[] nils = new Nil[inTypes.length + 1];
		System.arraycopy(inTypes, 0, nils, 0, inTypes.length);
		nils[nils.length - 1] = outType;
		return (T) env.op(opName, Nil.of(specialType), nils, outType);
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchComputerHelper(final OpEnvironment env, final String opName, final Hints hints, final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length + 1];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		types[types.length - 1] = outType.getType();
		final Type specialType = Types.parameterize(opClass, types);
		final Nil<?>[] nils = new Nil[inTypes.length + 1];
		System.arraycopy(inTypes, 0, nils, 0, inTypes.length);
		nils[nils.length - 1] = outType;
		return (T) env.op(opName, Nil.of(specialType), nils, outType, hints);
	}

#foreach($arity in $arities)
#foreach($a in [1..$arity])
	/**
	 * Static utility method to match an {@link Inplaces} op with $arity input#if ( $arity != 1 )s#end, modifying the $a#if ( $a == 1 )st#elseif ( $a == 2 )nd#elseif ( $a == 3 )rd#{else}th#end input in-place.
	 *
	 * @return An instance of the matched op, e.g. for reuse.
	 *
	 * @throws OpMatchingException if the Op request cannot be satisfied.
	 *
	 * @see #[[#matchComputer]]#(OpEnvironment, String#foreach( $i in [1..$arity] ), Nil#end, Nil) For a reusable Op to process pre-allocated outputs without re-matching.
	 * @see #[[#matchFunction]]#(OpEnvironment, String#foreach( $i in [1..$arity] ), Nil#end, Nil) For a reusable Op that generates output instances based on its inputs.
	 */
	@SuppressWarnings({ "unchecked" })
	public static $inplaceGenerics.call($arity, $a) $inplaceType.call($arity, $a)$inplaceGenerics.call($arity, $a) $matchName.call($arity, $a)(final OpEnvironment env, final String opName, $matchParams.call($arity, $a))
	{
		return matchInplaceHelper(env, opName, ${inplaceClass.call($arity, $a)}, ioType, new Nil[] {${basicParams.call($arity, $a)}});
	}

#end
#end

#foreach($arity in $arities)
#foreach($a in [1..$arity])
	/**
	 * As {@link OpBuilder#$matchName.call($arity, $a)}, but match using the provided {@code Hints}.
	 */
	@SuppressWarnings({ "unchecked" })
	public static $inplaceGenerics.call($arity, $a) $inplaceType.call($arity, $a)$inplaceGenerics.call($arity, $a) $matchName.call($arity, $a)(final OpEnvironment env, final String opName, $matchParams.call($arity, $a), final Hints hints)
	{
		return matchInplaceHelper(env, opName, hints, ${inplaceType.call($arity, $a)}.class, ioType, new Nil[] {${basicParams.call($arity, $a)}});
	}

#end
#end
	@SuppressWarnings({ "unchecked" })
	private static <T> T matchInplaceHelper(final OpEnvironment env, final String opName,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType);
	}

	@SuppressWarnings({ "unchecked" })
	private static <T> T matchInplaceHelper(final OpEnvironment env, final String opName, final Hints hints,
		final Class<T> opClass, final Nil<?> outType, final Nil<?>... inTypes)
	{
		final Type[] types = new Type[inTypes.length];
		for (int i = 0; i < inTypes.length; i++)
			types[i] = inTypes[i].getType();
		final Type specialType = Types.parameterize(opClass, types);
		return (T) env.op(opName, Nil.of(specialType), inTypes, outType, hints);
	}
}
