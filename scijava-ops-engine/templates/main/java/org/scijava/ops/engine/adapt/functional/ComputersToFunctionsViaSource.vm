/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.functional;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.function.Functions;
import org.scijava.function.Producer;
import org.scijava.ops.engine.BaseOpHints.Adaptation;
import org.scijava.ops.spi.OpDependency;
import org.scijava.ops.spi.Op;
import org.scijava.ops.spi.OpClass;
import org.scijava.priority.Priority;

/**
 * Collection of adaptation Ops to convert {@link Computers} into
 * {@link Functions} with the use of a {@link Producer} that creates the output
 * using the first input as a model.
 * 
 * @author Gabriel Selzer
 */
public class ComputersToFunctionsViaSource {

#foreach($arity in [0..$maxArity])
	@OpClass(names = "engine.adapt", priority = Priority.LOW)
	public static class Computer${arity}ToFunction${arity}ViaSource$generics.call($arity)
			implements Function<$computerArity.call($arity)$generics.call($arity), $functionArity.call($arity)$generics.call($arity)>, 
			Op
		{

		@OpDependency(name = "engine.create", hints={Adaptation.FORBIDDEN})
		Producer<O> creator;

		/**
		 * @param computer the computer to adapt
		 * @return a Function adaptation of computer
		 */
		@Override
		public $functionArity.call($arity)$generics.call($arity) apply($computerArity.call($arity)$generics.call($arity) computer) {
			return (#if($arity == 0)#{else}$applyArgs.call($arity)#end) -> {
				O out = creator.create();
				computer.compute($computeArgs.call($arity));
				return out;
			};
		}

	}

#end
}
