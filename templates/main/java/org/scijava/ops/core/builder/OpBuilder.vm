/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.core.builder;

import java.lang.reflect.Type;
import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.ops.OpService;
import org.scijava.ops.function.Computers;
import org.scijava.ops.function.Functions;
import org.scijava.ops.function.Inplaces;
import org.scijava.ops.function.Producer;
import org.scijava.ops.types.Nil;
import org.scijava.ops.types.TypeService;
import org.scijava.util.Types;

/**
 * Convenience class for looking up and/or executing ops using a builder
 * pattern.
 * <p>
 * TODO: Examples
 * </p>
 *
 * @author Curtis Rueden
 * @author Gabriel Selzer
 */
public class OpBuilder {

	private final OpService ops;
	private final String opName;

	public OpBuilder(final OpService ops, final String opName) {
		this.ops = ops;
		this.opName = opName;
	}

	/** Specifies the op accepts no inputs&mdash;i.e., a nullary op. */
	public Arity0_OU input() {
		return new Arity0_OU();
	}

#foreach($arity in $arities)
	/** Specifies $arity input by value. */
	public $genericsWithoutOutput.call($arity) Arity${arity}_IV_OU$genericsWithoutOutput.call($arity) input($inputObjectsArgs.call($arity))
	{
		return new Arity${arity}_IV_OU<>($inputObjects.call($arity));
	}

	/** Specifies $arity input by raw type. */
	public $genericsWithoutOutput.call($arity) Arity${arity}_IT_OU$genericsWithoutOutput.call($arity) inType($inputClassesArgs.call($arity))
	{
		return inType($inputClassesToTypes.call($arity));
	}

	/** Specifies $arity input by generic type. */
	public $genericsWithoutOutput.call($arity) Arity${arity}_IT_OU$genericsWithoutOutput.call($arity) inType($inputTypesArgs.call($arity))
	{
		return new Arity${arity}_IT_OU<>($inputTypes.call($arity));
	}

#end
	// -- Helper methods --

	@SuppressWarnings({ "unchecked" })
	private <T> Nil<T> type(Object obj) {
		return (Nil<T>) Nil.of(ops.context().service(TypeService.class).reify(obj));
	}

	private void checkComputerRefs(Object... objects) {
		checkRefs(objects.length - 1, "Output", objects);
	}

	private void checkInplaceRefs(int inplaceNo, Object... objects) {
		checkRefs(inplaceNo - 1, "Mutable input " + inplaceNo, objects);
	}

	private void checkRefs(int mutableIndex, String label, Object... objects) {
		for (int i = 0; i < objects.length; i++) {
			if (i == mutableIndex) continue;
			if (objects[mutableIndex] == objects[i]) {
				throw new IllegalArgumentException(label +
					" cannot be same reference as input #" + (i + 1));
			}
		}
	}

	// @formatter:off
	/*
	 * -- HELPER CLASSES --
	 * 
	 * For each arity, there are multiple conditions:
	 * * Input TYPES are given (IT) 
	 * 	1) The output is unspecified (OU): 
	 * 		a) matchable: Function, Inplace
	 * 		b) runnable: none
	 * 	2) The output type is given (OT): 
	 * 		a) matchable: Function, Computer
	 * 		b) runnable: none
	 *  
	 * * Input VALUES are given (IV) (N.B. this case applies for Arity0):
	 * 	1) The output is unspecified (OU): 
	 * 		a) matchable: Function, Inplace
	 * 		b) runnable: apply, mutate
	 * 	2) The output type is given (OT): 
	 * 		a) matchable: Function, Computer
	 * 		b) runnable: apply
	 * 	3) The output value is given (OV): 
	 * 		a) matchable: Computer
	 *  	b) runnable: compute
	 */
	// @formatter:on

	/**
	 * Builder with arity 0, output unspecified.
	 *
	 * @author Curtis Rueden
	 */
	public final class Arity0_OU {

		public <O> Arity0_OV<O> output(final O out) {
			return new Arity0_OV<>(out);
		}

		public <O> Arity0_OT<O> outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		public <O> Arity0_OT<O> outType(final Nil<O> outType) {
			return new Arity0_OT<>(outType);
		}

		public Producer<?> producer() {
			final Nil<Producer<Object>> specialType = new Nil<Producer<Object>>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] {
						Object.class });
				}
			};
			return ops.findOp(opName, specialType, new Nil<?>[0], Nil.of(
				Object.class));
		}

		public Object create() {
			return producer().create();
		}
	}

	/**
	 * Builder with arity 0, output type given.
	 *
	 * @author Curtis Rueden
	 * @param <O> The type of the output.
	 */
	public final class Arity0_OT<O> {

		private final Nil<O> outType;

		public Arity0_OT(final Nil<O> outType) {
			this.outType = outType;
		}

		public Producer<O> producer() {
			final Nil<Producer<O>> specialType = new Nil<Producer<O>>() {

				@Override
				public Type getType() {
					return Types.parameterize(Producer.class, new Type[] { outType
						.getType() });
				}
			};
			return ops.findOp(opName, specialType, new Nil<?>[0], outType);
		}

		public Computers.Arity0<O> computer() {
			return Computers.match(ops, opName, outType);
		}

		public O create() {
			return producer().create();
		}

	}

	/**
	 * Builder with arity 0, output value given.
	 *
	 * @author Curtis Rueden
	 * @param <O> The type of the output.
	 */
	public final class Arity0_OV<O> {

		private final O out;

		public Arity0_OV(final O out) {
			this.out = out;
		}

		public Computers.Arity0<O> computer() {
			return Computers.match(ops, opName, type(out));
		}

		public void compute() {
			computer().compute(out);
		}

	}

#foreach($arity in $arities)
	/**
	 * Builder with arity $arity, input type given, output type given.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 * @param <O> The type of the output.
	 */
	public final class Arity${arity}_IT_OT$generics.call($arity) {

#foreach($a in [1..$arity])
		private final Nil<I$a> in${a}Type;
#end
		private final Nil<O> outType;

		public Arity${arity}_IT_OT($inputTypesArgsWithOutput.call($arity))
		{
#foreach($a in [1..$arity])			
			this.in${a}Type = in${a}Type;
#end
			this.outType = outType;
		}

		public $functionArity.call($arity)$generics.call($arity) function() {
			return Functions.match(ops, opName, $inputTypesWithOutput.call($arity));
		}

		public Computers.Arity${arity}$generics.call($arity) computer() {
			return Computers.match(ops, opName, $inputTypesWithOutput.call($arity));
		}

#foreach($a in [1..$arity])
		public Inplaces.Arity$inplaceSuffix.call($arity, $a)$genericsWithoutOutput.call($arity) inplace${inplaceMatchNumber.call($arity, $a)}() {
			return Inplaces.match${inplaceMatchNumber.call($arity, $a)}(ops, opName, $inputTypes.call($arity));
		}

#end
	}

	/**
	 * Builder with arity $arity, input type given, output unspecified.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 */
	public final class Arity${arity}_IT_OU$genericsWithoutOutput.call($arity) {

#foreach($a in [1..$arity])
		private final Nil<I$a> in${a}Type;
#end

		public Arity${arity}_IT_OU($inputTypesArgs.call($arity))
		{
#foreach($a in [1..$arity])			
			this.in${a}Type = in${a}Type;
#end
		}

		public <O> Arity${arity}_IT_OT$generics.call($arity) outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		public <O> Arity${arity}_IT_OT$generics.call($arity) outType(final Nil<O> outType) {
			return new Arity${arity}_IT_OT<>($inputTypesWithOutput.call($arity));
		}

		public $functionArity.call($arity)$genericsWildcardFunction.call($arity) function() {
			return Functions.match(ops, opName, $inputTypes.call($arity), Nil.of(Object.class));
		}

#foreach($a in [1..$arity])
		public Inplaces.Arity$inplaceSuffix.call($arity, $a)$genericsWithoutOutput.call($arity) inplace${inplaceMatchNumber.call($arity, $a)}() {
			return Inplaces.match${inplaceMatchNumber.call($arity, $a)}(ops, opName, $inputTypes.call($arity));
		}

#end
	}

	/**
	 * Builder with arity ${arity}, input value given, output type given.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 * @param <O> The type of the output.
	 */
	public final class Arity${arity}_IV_OT$generics.call($arity) {

#foreach($a in [1..$arity])
		private final I$a in${a};
#end
		private final Nil<O> outType;

		public Arity${arity}_IV_OT($inputObjectsArgs.call($arity), final Nil<O> outType)
		{
#foreach($a in [1..$arity])
			this.in$a = in$a;
#end
			this.outType = outType;
		}

		public $functionArity.call($arity)$generics.call($arity) function() {
			return Functions.match(ops, opName, $inputTypesFromArgs.call($arity), outType);
		}
	
		public Computers.Arity${arity}$generics.call($arity) computer() {
			return Computers.match(ops, opName, $inputTypesFromArgs.call($arity), outType);
		}
	
		public O apply() {
			return function().apply($inputObjects.call($arity));
		}
	}

	/**
	 * Builder with arity $arity, input value given, output unspecified.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 */
	public final class Arity${arity}_IV_OU$genericsWithoutOutput.call($arity) {

#foreach($a in [1..$arity])
		private final I$a in$a;
#end

		public Arity${arity}_IV_OU($inputObjectsArgs.call($arity))
		{
#foreach($a in [1..$arity])
			this.in$a = in$a;
#end
		}

		public <O> Arity${arity}_IV_OV$generics.call($arity) output(final O out) {
			checkComputerRefs($inputObjects.call($arity), out);
			return new Arity${arity}_IV_OV<>($inputObjects.call($arity), out);
		}

		public <O> Arity${arity}_IV_OT$generics.call($arity) outType(final Class<O> outType) {
			return outType(Nil.of(outType));
		}

		public <O> Arity${arity}_IV_OT$generics.call($arity) outType(final Nil<O> outType) {
			return new Arity${arity}_IV_OT<>($inputObjects.call($arity), outType);
		}

		public $functionArity.call($arity)$genericsWildcardFunction.call($arity) function() {
			return Functions.match(ops, opName, $inputTypesFromArgs.call($arity), Nil.of(Object.class));
		}

#foreach($a in [1..$arity])
		public Inplaces.Arity$inplaceSuffix.call($arity, $a)$genericsWithoutOutput.call($arity) inplace${inplaceMatchNumber.call($arity, $a)}() {
			checkInplaceRefs($a, $inputObjects.call($arity));
			return Inplaces.match${inplaceMatchNumber.call($arity, $a)}(ops, opName, $inputTypesFromArgs.call($arity));
		}

#end
		public Object apply() {
			return function().apply($inputObjects.call($arity));
		}

#foreach($a in [1..$arity])
		public void mutate${inplaceMatchNumber.call($arity, $a)}() {
			inplace${inplaceMatchNumber.call($arity, $a)}().mutate($inputObjects.call($arity));
		}

#end
	}

	/**
	 * Builder with arity $arity, input value given, output value given.
	 *
	 * @author Curtis Rueden
#foreach($a in [1..$arity])
	 * @param <I$a> The type of input $a.
#end
	 */
	public final class Arity${arity}_IV_OV${generics.call($arity)} {

#foreach($a in [1..$arity])
		private final I$a in$a;
#end
		private final O out;

		public Arity${arity}_IV_OV($inputObjectsArgs.call($arity), final O out)
		{
#foreach($a in [1..$arity])
			this.in$a = in$a;
#end
			this.out = out;
		}

		public Computers.Arity${arity}${generics.call($arity)} computer() {
			return Computers.match(ops, opName, $inputTypesFromArgs.call($arity), type(out));
		}

		public void compute() {
			computer().compute($inputObjects.call($arity), out);
		}

	}

#end
}
