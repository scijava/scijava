/*
 * #%L
 * SciJava Operations: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2016 - 2019 SciJava Ops developers.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package org.scijava.ops.core.builder;

import java.util.function.BiFunction;
import java.util.function.Function;

import org.scijava.ops.OpField;
import org.scijava.ops.core.OpCollection;
import org.scijava.ops.function.Computers;
import org.scijava.ops.function.Functions;
import org.scijava.ops.function.Inplaces;
import org.scijava.ops.function.Producer;
import org.scijava.plugin.Plugin;

/**
 * Helper ops for {@link OpBuilderTest}.
 *
 * @author Curtis Rueden
 */
@Plugin(type = OpCollection.class)
public class OpBuilderTestOps {

	/*
	 * -- FUNCTIONS --
	 * 
	 * The general procedure for these Ops: Given a set of inputs in1, in2, ...,
	 * inN, The output will be sum(in1, in2, ..., inN).
	 */
	
#foreach($arity in [0..$maxArity])
	// ARITY $arity
	@OpField(names = "test.addDoubles")
	public final ${functionArity.call($arity)}${genericDoubles.call($arity)} addDoubles${arity} = ($args.call($arity)) -> ${addDoublesOutput.call($arity)};
	
#end

	/*
	 * -- INPLACES --
	 * 
	 * The general procedure for these Ops: Given a set of inputs in1, in2, ... ,
	 * io, ..., inN, the output will be io = in1 * in2 * ... * io * ... * inN.
	 * N.B. We do this in arrays since the doubles themselves are immutable. 
	 */
#foreach($arity in [1..$maxArity])
#foreach($a in [1..$arity])
	// ARITY $arity
	@OpField(names = "test.mulArrays")
	public final ${inplaceType.call($arity, $a)}${arrayGenerics.call($arity)} powDoubles${arity}_${a} = ($inplaceArgs.call($arity, $a)) -> {
			for(int i = 0; i < io.length; i++) {
#foreach($i in $inputOnlyInplaceArgs.call($arity, $a))
				io[i] *= ${i}[i];
#end
			}
		};
		
#end
#end

	/*
	 * -- COMPUTERS --
	 * 
	 * The general procedure: given a set of inputs in1, in2, ... , inN, the output
	 * is given as in1 * in2 * ... * inN. N.B. we use arrays here since the doubles
	 * themselves are immutable
	 */

#foreach($arity in [0..$maxArity])
	// ARITY $arity
	@OpField(names = "test.addArrays")
	public final ${computerArity.call($arity)}${computerArrayGenerics.call($arity)} mulStrings$arity = ($computerArgs.call($arity)) -> {
		for (int i = 0; i < output.length; i++) {
			output[i] = 0;
#foreach($i in $argsList.call($arity))
			output[i] += ${i}[i];
#end
		}
	};

#end
}
