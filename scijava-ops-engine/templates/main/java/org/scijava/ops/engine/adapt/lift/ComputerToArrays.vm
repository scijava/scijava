
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.lift;

import java.util.function.Function;

import org.scijava.function.Computers;
import org.scijava.ops.spi.OpField;
import org.scijava.ops.spi.OpCollection;

/**
 * Collection of ops designed to lift {@link Computers} to operate
 * on arrays. TODO: multi-threading support
 * 
 * @author Gabriel Selzer
 */
public class ComputerToArrays$classGenerics.call($maxArity) implements OpCollection {

	private int minLength(Object[]... arrays) {
		int minLength = Integer.MAX_VALUE;
		for (Object[] array : arrays)
			if (array.length < minLength) minLength = array.length;
		return minLength;
	}

#foreach($arity in [0..$maxArity])
	@OpField(names = "engine.adapt", params = "fromOp, toOp")
	public final Function<$computerArity.call($arity)$generics.call($arity), $computerArity.call($arity)$arrayGenerics.call($arity)> liftComputer$arity =
		(computer) -> {
			return ($computeArgs.call($arity)) -> {
				int max = minLength($computeArgs.call($arity));
				for (int i = 0; i < max; i++) {
					computer.compute($arraysAtPosI.call($arity));
				}
			};
		};

#end
}
