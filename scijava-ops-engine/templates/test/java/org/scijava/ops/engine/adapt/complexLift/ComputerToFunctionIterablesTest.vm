
/*
* This is autogenerated source code -- DO NOT EDIT. Instead, edit the
* corresponding template in templates/ and rerun bin/generate.groovy.
*/

package org.scijava.ops.engine.adapt.complexLift;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.scijava.function.Computers;
import org.scijava.ops.engine.AbstractTestEnvironment;
import org.scijava.ops.engine.OpBuilderTestOps;
import org.scijava.ops.engine.adapt.functional.ComputersToFunctionsViaFunction;
import org.scijava.ops.engine.adapt.lift.FunctionToIterables;
import org.scijava.ops.engine.create.CreateOpCollection;
import org.scijava.types.Nil;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

/**
 * Tests the adaptation of {@link Computers} running on a type into
 * {@link Computers} running on an {@link Iterable} of that type.
 * 
 * @author Gabriel Selzer
 *
 */
public class ComputerToFunctionIterablesTest extends AbstractTestEnvironment {

	@BeforeAll
	public static void AddNeededOps() {
		Object[] lifters = objsFromNoArgConstructors(ComputersToFunctionsAndLift.class.getDeclaredClasses());
		ops.register(lifters);
		ops.register(new FunctionToIterables());
		Object[] adapters = objsFromNoArgConstructors(ComputersToFunctionsViaFunction.class.getDeclaredClasses());
		ops.register(adapters);
		ops.register(new CreateOpCollection());
		ops.register(new OpBuilderTestOps());
	}

#foreach($arity in [1..$maxArity])
	@Test
	public void testComputer${arity}ToIterables() {
		final List<double[]> in = Arrays.asList(new double[] { 1, 2, 3 });
		final List<double[]> expected = Arrays.asList(new double[] $expectedList.call($arity));
		final Iterable<double[]> out = ops.op("test.addArrays").arity$arity().input($inputList.call($arity)).outType(new Nil<Iterable<double[]>>(){}).apply();
		assertArrayEquals(out.iterator().next(), expected.get(0), 0);
	}

#end
}
